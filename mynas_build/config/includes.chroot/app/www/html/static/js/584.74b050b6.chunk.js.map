{"version":3,"file":"static/js/584.74b050b6.chunk.js","mappings":"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","sources":["components/CommonWindow.js","components/JsonEditorForm.js","components/VirtualMachine.js","utils/qemu.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext, forwardRef } from 'react';\nimport { styled } from '@mui/system';\n\nimport {\n    Table, Pagination, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, TableContainer,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableBody,\n    Paper,\n    TablePagination,\n    Container,\n    Box,\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Modal\n} from '@mui/material';\nimport {\n    DesktopWindows, Settings, Notifications,\n    Close, Restore,\n    Menu,\n    Home,\n    ChevronLeft,\n    Maximize, Minimize\n} from '@mui/icons-material';\n\nimport { useData } from \"../store/global_data.js\";\n\n\nconst CommonWindow = forwardRef((props, ref) => {\n    const { onActive, onClose, onRestore, onMaximize, onMinimize } = props;\n    return <><AppBar sx={{ position: 'relative' }}>\n        <Toolbar\n            sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                marginBottom: '8px',\n            }}\n        >\n            <Typography variant=\"h6\" component=\"div\" sx={{\n                flexGrow: 1,\n                cursor: 'move',\n            }}\n                className=\"window-title\"\n                onClick={onActive}\n            >\n              {props.title}\n            </Typography>\n            <IconButton color=\"inherit\" onClick={onMinimize}>\n                <Minimize />\n            </IconButton>\n            {props.isMaximized ? (\n                <IconButton color=\"inherit\" onClick={onRestore}>\n                    <Restore />\n                </IconButton>\n            ) : (\n                <IconButton color=\"inherit\" onClick={onMaximize}>\n                    <Maximize />\n                </IconButton>\n            )}\n            <IconButton color=\"inherit\" onClick={onClose}>\n                <Close />\n            </IconButton>\n        </Toolbar>\n    </AppBar>\n        {props.children}\n    </>;\n\n});\n\nexport default CommonWindow;\n","import React, {useState, useEffect, useRef, useContext, forwardRef, useImperativeHandle, Fragment } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { useData,rix_make_watch_data } from \"../store/global_data.js\";\nimport {Autocomplete, TextField} from '@mui/material';\n\nlet JSONEditor = window.JSONEditor;\n\n\nclass Disk_Select extends JSONEditor.AbstractEditor{\n    build() {\n        let value = this.value;\n        let self = this;\n        this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());\n        this.container.appendChild(this.title);\n        let disks = this.options.disks;\n        this.disks = disks;\n        const div = document.createElement('div');\n        this.container.append(div);\n        this.view_root = ReactDOM.createRoot(div);\n        this.rix_init_flag = false;\n        let onChange = (e, v)=> {\n            e.preventDefault();\n            this.setValue(v, false, false);\n        };\n        this.used_disks = rix_make_watch_data({used:[], cur_path:''});\n        if(this.parent.parent&&this.parent.parent.schema.uniqueItems) {\n            let cur_list = this.parent.parent;\n            this.jsoneditor.watch(cur_list.path, ()=> {\n                let v2 = cur_list.getValue();\n                let list = v2.map(v=>v.path);\n                this.used_disks.set('used', list);\n            });\n        }\n        this.set_model = (v)=> {\n            if (self.parent && self.parent.jsoneditor) {\n                let pr = self.parent.jsoneditor.getEditor(self.parent.path + '.model');\n                if (pr && self.disks) {\n                    let v2 = v;\n                    let model = self.disks.filter(v => v.path == v2)[0];\n                    if (model) {\n                        pr.setValue(model.model);\n                    }\n                }\n            }\n        };\n        this.used_disks.watch('cur_path', this.set_model);\n        const {global_data} = this.defaults;//useData();\n        let MyRender = ()=> {\n            const [options, setOptions] = useState([]);\n            const [value, setValue] = useState('');\n            if(!disks) disks = global_data.get('blockdevices');\n            this.disks = disks;\n            useEffect(() => {\n                let set_options = (v2)=> {\n                    let list_options = disks.map(v=>v.path);\n                    list_options = list_options.filter(v=> {\n                        return v2.filter(name=>name==v).length == 0;\n                    });\n                    setOptions(list_options);\n                };\n                this.used_disks.watch('used', set_options);\n                let set_v = (v2)=> {\n                    setValue(v2);\n                    this.set_model(v2);\n                };\n                set_options(this.used_disks.get('used'));\n                set_v(this.used_disks.get('cur_path'));\n                //this.used_disks.watch('cur_path', set_v);\n                return ()=> {\n                    this.used_disks.unwatch('used', set_options);\n                    //this.used_disks.unwatch('cur_path', set_v);\n                };\n            },[]);\n            return <Autocomplete\n                     freeSolo\n                     value={value}\n                     onChange={onChange}\n                     options={options}\n                     getOptionLabel={(option) => {\n                         let disk = disks.filter(v=>v.path == option)[0];\n                         if(disk) {\n                             let v = `${disk.model}(${disk.size}) at ${disk.path}`;\n                             return v;\n                         }\n                         return \"\";\n                     }}\n                     renderInput={(params) => {\n                                               return <TextField {...params} label=\"选择磁盘\" />;\n                                              }}\n                   />;\n        };\n        this.view_root.render(<MyRender/>);\n    }\n    setValue(v, init, fromTemplate) {\n        this.value = v;\n        this.refreshValue();\n        this.used_disks.set(\"cur_path\", v);\n        this.onChange(true);\n    }\n    getValue() {\n        return this.value;\n    }\n    destroy() {\n        this.used_disks.unwatch(this.set_model);\n        setTimeout(()=> {\n        this.view_root.unmount();\n        });\n    }\n}\nconst JsonEditorForm = forwardRef((props, ref) => {\n    const { schema, callbacks} = props;\n    const editorRef = useRef(null);\n    const containerRef = useRef(null);\n    const {global_data} = useData();\n    JSONEditor.defaults.editors.disk_select= Disk_Select;\n    JSONEditor.defaults.global_data = global_data;\n    //JSONEditor.defaults.options.keep_oneof_values = false;\n    JSONEditor.defaults.resolvers.unshift(function (schema) {\n        if (schema.type === 'string' && schema.format === 'disk_select') {\n            return 'disk_select';\n        }\n    });\n    //if(editorRef.current&&props.data) {\n    //    editorRef.current.setValue(props.data);\n    //}\n    useEffect(() => {\n        //if(editorRef.current) return;\n        let options = {\n            schema,\n            theme: 'bootstrap4',\n            //iconlib: 'fontawesome4',\n            ...props.options\n            //disable_collapse: true,\n            //disable_edit_json: true,\n            //disable_properties: true,\n            //no_additional_properties: true,\n            //required_by_default: true,\n        };\n        editorRef.current = new JSONEditor(containerRef.current, options);\n        editorRef.current.on('ready',() => {\n            // Now the api methods will be available\n            if(props.data)\n            editorRef.current.setValue(props.data);\n        });\n        return () => {\n            if (editorRef.current) {\n                editorRef.current.destroy();\n            }\n        };\n    }, [schema,props]);\n\n    const getValue = () => {\n        return editorRef.current.getValue();\n    };\n\n    useImperativeHandle(ref, () => ({\n        getValue,\n    }));\n\n    return (\n        <div ref={containerRef} {...props}/>\n    );\n});\nexport default JsonEditorForm;\n","import React, { useState, useEffect, useRef, useContext } from 'react';\nimport {\n    Box, Typography, Button,\n    Drawer,\n    Divider,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Container,\n    AppBar as MuiAppBar,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Toolbar,\n    IconButton,\n} from '@mui/material';\nimport { styled } from '@mui/system';\nimport {\n    Settings,\n    Close, Restore,\n    Menu,\n    Home,\n    ChevronLeft,\n    Maximize, Minimize\n} from '@mui/icons-material';\n\nimport qemu from \"../utils/qemu\";\n\nimport { useData } from \"../store/global_data.js\";\nimport JsonEditorForm from './JsonEditorForm';\n\nimport { Terminal } from 'xterm';\nimport 'xterm/css/xterm.css';\nimport 'xterm/lib/xterm.js';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { AttachAddon } from 'xterm-addon-attach';\nimport CommonWindow from './CommonWindow';\n\nconst drawerWidth = 240;\nconst CustomDialogContent = styled(DialogContent)({\n    width: '80%',\n});\n\nconst Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(\n    ({ theme, open }) => {\n        let ret = {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginLeft: `-${drawerWidth}px`,\n        ...(open && {\n            transition: theme.transitions.create('margin', {\n                easing: theme.transitions.easing.easeOut,\n                duration: theme.transitions.duration.enteringScreen,\n            }),\n            marginLeft: 0,\n        }),\n        };\n        return ret;\n    },\n);\n\nconst AppBar = styled(MuiAppBar, {\n    shouldForwardProp: (prop) => prop !== 'open',\n})(({ theme, open }) => ({\n    transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n    }),\n    ...(open && {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: `${drawerWidth}px`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    }),\n}));\n\nconst DrawerHeader = styled('div')(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n}));\n\nconst Install=(props)=> {\n    const terminal = useRef(null);\n    const shell_ref = useRef(null);\n    let [container_up_message, set_container_up_message] = useState(\"\");\n    useEffect(()=> {\n        terminal.current = new Terminal({\n            //rendererType: 'canvas',\n            rows: 40,\n            convertEol: true,\n            scrollback: 10,\n            disableStdin: false,\n            cursorStyle: 'underline',\n            cursorBlink: true\n        });\n        const fitAddon = new FitAddon();\n        terminal.current.loadAddon(fitAddon);\n        terminal.current.onResize((size) => {\n            // 调整 xterm 和 WebSocket 的窗口大小\n            fitAddon.fit();\n        });\n        terminal.current.open(shell_ref.current);\n        if(props.data == null) return;\n        qemu[props.data.op]({\n            stdout:(out)=> {\n                console.log(\"up_container=\", out);\n                if(terminal.current)\n                    terminal.current.write(out);\n                //set_container_up_message(container_up_message+out);\n            },\n            stderr:(err)=> {\n                console.log(\"up_container stderr=\", err);\n            },\n            onerr:(err)=> {\n                console.log(\"up_container err=\", err);\n            },\n            onend:()=> {\n                if(props.onEnd)\n                props.onEnd();\n            }\n        });\n    },[props]);\n    return (<Box ref={shell_ref} width=\"100vh\" height=\"100vh\"/>);\n};\n\nconst VirtualMachine = (props) => {\n    const { global_data, api } = useData();\n    const [state, setState] = useState({\n        //install_x11: false,\n        install_virt_manager:false,\n        run_virt_manager: false,\n        //run_x11: false,\n        install_dialog: false,\n        drawOpen:false,\n        run_cmd:{},\n        openAddDialog: false,\n        json_editor_option: {\n            disable_edit_json: true,\n            disable_properties: true,\n            disable_collapse: true,\n            no_additional_properties: true,\n            required_by_default: true,\n        },\n        schema:{\n            \"$ref\": \"#/definitions/qemu\",\n            \"definitions\": {\n                \"object\": {\n                    \"type\": \"string\",\n                    \"title\": \"Object\",\n                    \"format\": \"json\",\n                    \"default\":\"{}\",\n                    \"options\": {\n                        \"ace\": {\n                            \"theme\": \"ace/theme/vibrant_ink\",\n                            \"tabSize\": 2,\n                            \"useSoftTabs\": true,\n                            \"wrap\": true\n                        }\n                    }\n                },\n                \"cdrom\": {\n                    \"type\": \"object\",\n                    \"title\": \"光盘设置\",\n                    \"format\": \"grid\",\n                    \"properties\":{\n                        \"filename\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"title\": \"ISO文件路径\"\n                        },\n                        \"bus_options\": {\n                            \"type\": \"string\",\n                            \"default\": \"VirtIO\",\n                            \"title\": \"总线类型\",\n                            \"enum\": [\"VirtIO\", \"scsi\", \"sate\", \"ide\", \"usb\"],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"VirtIO\", \"scsi\", \"sate\", \"ide\", \"usb\"\n                                ]\n                            }\n                        },\n                        \"boot_order\": {\n                            \"type\": \"integer\",\n                            \"default\": 2,\n                            \"title\": \"启动顺序\"\n                        }\n                    },\n                    \"required\": [\n                        \"filename\",\n                        \"bus_options\",\n                        \"boot_order\"\n                    ]\n                },\n                \"disk\": {\n                    \"type\": \"object\",\n                    \"title\": \"磁盘\",\n                    \"properties\":{\n                        \"filename\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"title\": \"磁盘文件路径\"\n                        },\n                        \"size\": {\n                            \"type\": \"string\",\n                            \"default\": \"1G\",\n                            \"title\": \"磁盘大小\"\n                        },\n                        \"type\": {\n                            \"type\": \"string\",\n                            \"default\": \"qcow2\",\n                            \"title\": \"虚拟磁盘类型\",\n                            \"enum\": [\"qcow2\", \"raw\"],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"qcow2\",\n                                    \"raw\"\n                                ]\n                            }\n                        },\n                        \"bus_options\": {\n                            \"type\": \"string\",\n                            \"default\": \"VirtIO\",\n                            \"title\": \"总线类型\",\n                            \"enum\": [\"VirtIO\", \"scsi\", \"sate\", \"ide\", \"usb\"],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"VirtIO\", \"scsi\", \"sate\", \"ide\", \"usb\"\n                                ]\n                            }\n                        },\n                        \"boot_order\": {\n                            \"type\": \"integer\",\n                            \"default\": 1,\n                            \"title\": \"启动顺序\"\n                        }\n                    },\n                    \"required\": [\n                        \"filename\",\n                        \"size\",\n                        \"type\",\n                        \"bus_options\",\n                        \"boot_order\"\n                    ]\n                },\n                \"share\": {\n                    \"type\": \"object\",\n                    \"title\": \"共享\",\n                    \"properties\": {\n                        \"mode\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"title\": \"虚拟磁盘类型\",\n                            \"enum\": [\"9p\", \"virtiofs\"],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"9p Mode\",\n                                    \"Virtiofs Mode\"\n                                ]\n                            }\n                        },\n                        \"source\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"title\": \"主机目录\"\n                        },\n                        \"target\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"title\": \"虚拟机挂载标签\"\n                        }\n                    },\n                    \"required\": [\n                        \"mode\",\n                        \"source\",\n                        \"target\"\n                    ]\n                },\n                \"gpu\": {\n                    \"type\": \"object\",\n                    \"title\": \"显卡\",\n                    \"properties\": {\n                        \"id\": {\n                            \"type\": \"string\",\n                            \"default\": \"virtual\",\n                            \"title\": \"虚拟磁盘类型\",\n                            \"enum\": [\"virtual\"],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"virtual\"\n                                ]\n                            }\n                        },\n                        \"source\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"title\": \"主机目录\"\n                        },\n                        \"target\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"title\": \"虚拟机挂载标签\"\n                        }\n                    },\n                    \"required\": [\n                        \"mode\",\n                        \"source\",\n                        \"target\"\n                    ]\n                },\n                \"machine\": {\n                    \"type\": \"string\",\n                    \"title\": \"Machine\",\n                    \"default\": \"pc-q35-7.1\",\n                    \"enum\": [\n                        \"pc-q35-7.1\",\n                        \"pc-i440fx-6.2\"\n                    ],\n                    \"options\": {\n                        \"enum_titles\": [\n                            \"pc-q35-7.1\",\n                            \"pc-i440fx-6.2\"\n                        ]\n                    }\n                },\n                \"overcommit\": {\n                    \"type\": \"string\",\n                    \"title\": \"overcommit\",\n                    \"default\": \"mem-lock=off\",\n                    \"options\": {\n                        \"hidden\": true,\n                    }\n                },\n                \"smp\": {\n                    \"type\": \"string\",\n                    \"title\": \"逻辑CPU\",\n                    \"format\": \"vm_smp\",\n                    \"default\": \"1,sockets=1,dies=1,cores=1,threads=1\"\n                },\n                \"chardev\": {\n                    \"type\": \"string\",\n                    \"title\": \"chardev\",\n                    \"default\": \"\"\n                },\n                \"mon\": {\n                    \"type\": \"string\",\n                    \"title\": \"mon\",\n                    \"default\": \"\"\n                },\n                \"global\": {\n                    \"type\": \"string\",\n                    \"title\": \"global\",\n                    \"default\": \"\"\n                },\n                \"rtc\": {\n                    \"type\": \"string\",\n                    \"title\": \"rtc\",\n                    \"default\": \"\"\n                },\n                \"boot\": {\n                    \"type\": \"string\",\n                    \"title\": \"boot\",\n                    \"default\": \"\"\n                },\n                \"device\": {\n                    \"type\": \"string\",\n                    \"title\": \"device\",\n                    \"format\": \"json\",\n                    \"default\": \"{}\",\n                    \"options\": {\n                        \"ace\": {\n                            \"theme\": \"ace/theme/vibrant_ink\",\n                            \"tabSize\": 2,\n                            \"useSoftTabs\": true,\n                            \"wrap\": true\n                        }\n                    }\n                },\n                \"netdev\": {\n                    \"type\": \"string\",\n                    \"title\": \"netdev\",\n                    \"default\": \"\",\n                },\n                \"audiodev\": {\n                    \"type\": \"string\",\n                    \"format\": \"json\",\n                    \"default\": \"{}\",\n                    \"options\": {\n                        \"ace\": {\n                            \"theme\": \"ace/theme/vibrant_ink\",\n                            \"tabSize\": 2,\n                            \"useSoftTabs\": true,\n                            \"wrap\": true\n                        }\n                    }\n                },\n                \"vnc_auto_port\": {\n                    \"type\": \"object\",\n                    \"title\": \"自动\",\n                    \"properties\": {\n                        \"type\": {\n                            \"type\": \"string\",\n                            \"default\": \"auto_port\",\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"auto_port\": {\n                            \"type\": \"boolean\",\n                            \"default\": true,\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        }\n                    },\n                    \"required\": [\n                        \"auto_port\",\n                        \"type\"\n                    ]\n                },\n                \"vnc_port\": {\n                    \"type\": \"object\",\n                    \"title\": \"手动\",\n                    \"properties\": {\n                        \"type\": {\n                            \"type\": \"string\",\n                            \"default\": \"port\",\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"port\": {\n                            \"type\": \"integer\",\n                            \"title\": \"监听端口\",\n                            \"default\": -1,\n                        },\n                        \"ws_port\": {\n                            \"type\": \"integer\",\n                            \"title\": \"网页端口\",\n                            \"default\": -1,\n                        }\n                    },\n                    \"required\": [\n                        \"port\",\n                        \"ws_port\",\n                        \"type\",\n                    ]\n                },\n                \"vnc\": {\n                    \"type\": \"object\",\n                    \"title\": \"VNC\",\n                    //\"format\": \"grid-strict\",\n                    \"properties\": {\n                        \"id\": {\n                            \"type\": \"string\",\n                            \"default\": \"virtual\",\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"protocol\": {\n                            \"type\": \"string\",\n                            \"default\": \"vnc\",\n                            \"title\": \"VM Console Protocol:\",\n                            \"enum\": [\n                                \"vnc\",\n                                \"spice\"\n                            ],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"VNC\",\n                                    \"SPICE\"\n                                ]\n                            }\n                        },\n                        \"port\": {\n                            \"type\": \"object\",\n                            \"title\": \"端口\",\n                            \"anyOf\": [\n                                { \"$ref\": \"#/definitions/vnc_auto_port\" },\n                                { \"$ref\": \"#/definitions/vnc_port\" }\n                            ]\n                        },\n                        \"model\": {\n                            \"type\": \"string\",\n                            \"title\": \"驱动模式\",\n                            \"default\": \"qxl\",\n                            \"enum\": [\"cirrus\", \"qxl\", \"vmvga\"],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"Cirrus\",\n                                    \"QXL (best)\",\n                                    \"vmvga\"\n                                ]\n                            }\n                        },\n                        \"keymap\": {\n                            \"type\": \"string\",\n                            \"title\": \"VNC键盘\",\n                            \"default\": \"en-us\"\n                        },\n                        \"password\": {\n                            \"type\": \"string\",\n                            \"title\": \"VNC密码\",\n                            \"default\": \"\"\n                        }\n                    },\n                    \"required\": [\"id\",\n                        \"protocol\",\n                        \"port\",\n                        \"model\",\n                        \"keymap\",\n                        \"password\"\n                    ]\n                },\n                \"nic\": {\n                    \"type\": \"object\",\n                    \"title\": \"网卡\",\n                    \"properties\":{\n                        \"mac\": {\n                            \"type\": \"string\",\n                            \"title\": \"MAC地址\",\n                            \"default\": \"\"\n                        },\n                        \"network\": {\n                            \"type\": \"string\",\n                            \"title\": \"source\",\n                            \"default\": \"\"\n                        },\n                        \"model\": {\n                            \"type\": \"string\",\n                            \"title\": \"网络模式\",\n                            \"default\": \"virtio-net\",\n                            \"enum\": [\"virtio-net\", \"virtio\", \"e1000\", \"vmxnet3\"],\n                            \"options\": {\n                                \"enum_titles\": [\"virtio-net\", \"virtio\", \"e1000\", \"vmxnet3\"],\n                            }\n                        },\n                        \"boot\": {\n                            \"type\": \"integer\",\n                            \"title\": \"启动顺序\",\n                            \"default\": 0\n                        }\n                    },\n                    \"required\": [\n                        \"mac\",\n                        \"network\",\n                        \"model\",\n                        \"boot\"\n                    ]\n                },\n                \"sandbox\": {\n                    \"type\": \"string\",\n                    \"title\": \"sandbox\",\n                    \"default\": \"on,obsolete=deny,elevateprivileges=deny,spawn=deny,resourcecontrol=deny\"\n                },\n                \"msg\": {\n                    \"type\": \"string\",\n                    \"title\": \"msg\",\n                    \"default\": \"timestamp=on\"\n                },\n                \"qemu\": {\n                    \"type\": \"object\",\n                    \"title\": \"虚拟机配置\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\",\n                            \"title\": \"名称\",\n                            \"default\": \"\"\n                        },\n                        /*\n                        \"debug_threads\": {\n                            \"type\": \"string\",\n                            \"title\": \"debug_threads\",\n                            \"default\": \"on\",\n                            \"enum\": [\"on\", \"off\"],\n                            \"default\": \"on\",\n                            \"options\": {\n                                \"hidden\": true,\n                                \"enum_titles\": [\n                                    \"on\",\n                                    \"off\"\n                                ]\n                            }\n                        },\n                        \"freeze_cpu_at_startup\": {\n                            \"type\": \"boolean\",\n                            \"title\": \"freeze CPU at startup\",\n                            \"default\": true,\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"accel\": {\n                            \"type\": \"string\",\n                            \"title\": \"加速方式\",\n                            \"default\": \"kvm\",\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        */\n                        \"cpu\":{\n                            \"type\": \"string\",\n                            \"title\": \"cpu设置\",\n                            \"enum\": [\n                                \"host,migratable=on,host-cache-info=on,l3-cache=off\",\n                                \"qemu64\"\n                            ],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"主机直通\",\n                                    \"qemu模拟\"\n                                ]\n                            },\n                            \"default\": \"host,migratable=on,host-cache-info=on,l3-cache=off\",\n                        },\n                        \"smp\": {\n                            \"$ref\": \"#/definitions/smp\",\n                        },\n                        \"memory\": {\n                            \"type\": \"integer\",\n                            \"title\": \"内存（MB）\",\n                            \"default\": 1024\n                        },\n                        \"max_memory\": {\n                            \"type\": \"integer\",\n                            \"title\": \"最大内存（MB）\",\n                            \"default\": 1024\n                        },\n                        \"machine\": {\n                            \"$ref\": \"#/definitions/machine\",\n                        },\n                        \"bios\": {\n                            \"type\": \"string\",\n                            \"default\": \"OVMF\",\n                            \"title\": \"bios选择\",\n                            \"enum\": [\"SeaBIOS\", \"OVMF\", \"OVMF TPM\"],\n                            \"options\": {\n                                \"enum_titles\": [\"SeaBIOS\", \"OVMF\", \"OVMF TPM\"]\n                            }\n                        },\n                        \"usbboot\": {\n                            \"type\": \"boolean\",\n                            \"default\": false,\n                            \"title\": \"usb启动\"\n                        },\n                        \"usbmode\": {\n                            \"type\": \"string\",\n                            \"default\": \"usb2\",\n                            \"enum\": [\"usb2\", \"usb3\", \"usb3-qemu\"],\n                            \"options\": {\n                                \"enum_titles\": [\n                                    \"2.0 (EHCI)\",\n                                    \"3.0 (nec XHCI)\",\n                                    \"3.0 (qemu XHCI)\"\n                                ]\n                            }\n                        },\n                        \"cdrom\": {\n                            \"$ref\": \"#/definitions/cdrom\"\n                        },\n                        \"disks\": {\n                            \"type\": \"array\",\n                            \"title\": \"磁盘配置\",\n                            \"format\": \"table\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/disk\",\n                            }\n                        },\n                        \"share\": {\n                            \"type\": \"array\",\n                            \"title\": \"共享配置\",\n                            \"format\": \"table\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/share\",\n                            }\n                        },\n                        \"gpu\": {\n                            \"type\": \"array\",\n                            \"title\": \"显卡配置\",\n                            \"items\": {\n                                \"type\": \"object\",\n                                \"title\": \"显卡\",\n                                \"anyOf\": [\n                                    {\n                                        \"$ref\": \"#/definitions/vnc\",\n                                    }]\n                            }\n                        },\n                        \"nic\": {\n                            \"type\": \"array\",\n                            \"title\": \"网路配置\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/nic\"\n                            }\n                        },\n                        /*\"objects\": {\n                            \"type\": \"array\",\n                            \"title\": \"object\",\n                            \"items\": {\n                                \"$ref\": \"#/definitions/object\",\n                            }\n                        },\n                        \"overcommit\": {\n                            \"$ref\": \"#/definitions/overcommit\",\n                        },\n                        */\n                        \"uuid\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        /*\n                        \"no-user-config\": {\n                            \"type\": \"boolean\",\n                            \"title\": \"不加载默认用户配置\",\n                            \"default\": true,\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"nodefaults\": {\n                            \"type\": \"boolean\",\n                            \"title\": \"不加载默认配置\",\n                            \"default\": true,\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"chardev\": {\n                            \"$ref\": \"#/definitions/chardev\",\n                        },\n                        \"mon\": {\n                            \"$ref\": \"#/definitions/mon\",\n                        },\n                        \"global\": {\n                            \"$ref\": \"#/definitions/global\"\n                        },\n                        \"rtc\": {\n                            \"$ref\": \"#/definitions/rtc\"\n                        },\n                        \"no-hpet\": {\n                            \"type\": \"boolean\",\n                            \"title\": \"hpet\",\n                            default: false,\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"no-shutdown\": {\n                            \"type\": \"boolean\",\n                            \"title\": \"shutdown\",\n                            default: false,\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"boot\": {\n                            \"$ref\": \"#/definitions/boot\"\n                        },\n                        \"devices\": {\n                            \"$ref\": \"#/definitions/device\"\n                        },\n                        \"netdev\": {\n                            \"$ref\": \"#/definitions/netdev\"\n                        },\n                        \"audiodev\": {\n                            \"$ref\": \"#/definitions/audiodev\"\n                        },\n                        \"keyboard\": {\n                            \"type\": \"string\",\n                            \"title\": \"键盘布局\",\n                            \"default\": \"en-us\"\n                        },\n                        \"sandbox\": {\n                            \"$ref\": \"#/definitions/sandbox\"\n                        },\n                        \"msg\": {\n                            \"$ref\": \"#/definitions/msg\"\n                        }*/\n                    },\n                    \"required\": [\n                        \"name\",\n                        \"cpu\",\n                        //\"debug_threads\",\n                        //\"freeze_cpu_at_startup\",\n                        \"smp\",\n                        \"memory\",\n                        \"max_memory\",\n                        \"machine\",\n                        \"bios\",\n                        \"usbboot\",\n                        \"usbmode\",\n                        \"cdrom\",\n                        \"disks\",\n                        \"share\",\n                        \"gpu\",\n                        \"nic\",\n                        //\"objects\",\n                        //\"accel\",\n                        //\"overcommit\",\n                        \"uuid\",\n                        //\"no-user-config\",\n                        //\"nodefaults\",\n                        //\"chardev\",\n                        //\"mon\",\n                        //\"global\",\n                        //\"rtc\",\n                        //\"no-hpet\",\n                        //\"no-shutdown\",\n                        //\"boot\",\n                        //\"devices\",\n                        //\"netdev\",\n                        //\"audiodev\",\n                    ]\n                }\n            }\n        },\n    });\n\n    let update_state = (v) => {\n        setState((prev) => {\n            return { ...prev, ...v };\n        });\n    };\n\n    let check= async()=> {\n        let ret = await qemu.check_virt_manager();\n        let install_virt_manager = false;\n        let run_virt_manager=false;\n        if(ret.ret == 0 && ret.data) {\n            let stdout = ret.data.stdout;\n            install_virt_manager = true;\n            if (stdout == '') {\n                install_virt_manager = true;\n                run_virt_manager = true;\n            } else {\n                if (!stdout.includes(\"not installed\")) {\n                    install_virt_manager = true;\n                    if (!stdout.includes(\"not run\")) {\n                        run_virt_manager = true;\n                    }\n                }\n            }\n        }\n        /*\n        ret = await qemu.check_x11_bridge();\n        let install_x11 = false;\n        let run_x11 = false;\n        if (ret.ret == 0 && ret.data) {\n            let stdout = ret.data.stdout;\n            if(stdout == '') {\n                install_x11 = true;\n                run_x11 = true;\n            } else {\n                if (!stdout.includes(\"not installed\")) {\n                    install_x11 = true;\n                    if (!stdout.includes(\"not run\")) {\n                        run_x11 = true;\n                    }\n                }\n            }\n        }\n        console.log(\"run_x11===\", run_x11, install_x11);\n        update_state({install_virt_manager, install_x11, run_x11});\n        */\n        update_state({ install_virt_manager, run_virt_manager});\n    };\n    useEffect(() => {\n        check();\n    },[]);\n    let install = ()=> {\n        let run_command = {};\n        console.log(\"state===\", state);\n        if(!state.install_virt_manager) {\n            run_command = {op:'install_virt_manager'};\n        } else if(!state.run_virt_manager) {\n            run_command = { op: 'run_virt_manager' };\n        }\n        /*\n        if (!state.install_x11) {\n            run_command = { op: 'install_x11_bridge' };\n        }\n        if(state.install_virt_manager && state.install_x11 && !state.run_x11) {\n            run_command = {op:'run_x11_bridge'};\n        }*/\n        if(!run_command.op) {\n            update_state({ install_dialog: false});\n        } else {\n            update_state({install_dialog: true, run_command});\n        }\n    };\n    let check_install = ()=> {\n        update_state({ install_dialog: false});\n        setTimeout(async()=> {\n            await check();\n            setTimeout(()=> {\n                install();\n            });\n        });\n    };\n    const { onActive, onClose, onRestore, onMaximize, onMinimize } = props;\n    \n    const jsonEditorFormRef = useRef(null);\n\n    let onSave=(e)=> {\n        let config =jsonEditorFormRef.current.getValue();\n        console.log(\"config==\", config);\n        qemu.parse_config(config);\n    };\n    const RenderAddDialog = () => {\n        let onClose = () => {\n            update_state({ openAddDialog: !state.openAddDialog });\n        };\n        return (\n            <Dialog open={state.openAddDialog} onClose={onClose} fullWidth maxWidth=\"md\">\n                <DialogTitle>添加参数</DialogTitle>\n                <CustomDialogContent>\n                  <JsonEditorForm schema={state.schema} ref={jsonEditorFormRef} options={state.json_editor_option}/>\n                </CustomDialogContent>\n                <DialogActions>\n                    <Button onClick={onSave}>保存</Button>\n                    <Button onClick={onClose}>取消</Button>\n                </DialogActions>\n            </Dialog>\n        );\n    };\n    let add_virtual = ()=> {\n        update_state({openAddDialog:true});\n    };\n    const CustomDialogContent = styled(DialogContent)({\n        width: '80%',\n    });\n    let location = window.location;\n    let virtual_url = `http://${location.host}:8185/`;\n    return <><CommonWindow title=\"虚拟机管理\" {...props}>\n        <Container>\n            {(!state.install_virt_manager || !state.run_virt_manager) &&\n                <Button onClick={install}>安装虚拟机管理</Button>\n          }\n            {(state.run_virt_manager) &&\n          <iframe src={virtual_url} frameborder=\"0\" style={{\n                border: \"0px\",\n                width: \"100%\",\n                height:\"100%\",\n                bottom:\"0px\",\n                left: \"0px\",\n                right: \"0px\",\n                \"top\":\"0px\",\n                \"position\": \"fixed\"\n            }} allowfullscreen></iframe>\n            }\n            {state.install_dialog &&\n                <Dialog open={state.install_dialog} onClose={() => console.log(\"close\")}>\n                    <DialogTitle>初始化</DialogTitle>\n                    <CustomDialogContent>\n                        <Install data={state.run_command} onEnd={check_install} />\n                    </CustomDialogContent>\n                    <DialogActions>\n                    </DialogActions>\n\n                </Dialog>\n          }\n    </Container>\n             </CommonWindow>\n           </>;\n\n    /*\n    return <><AppBar open={state.drawOpen} sx={{ position: 'relative' }}>\n<Toolbar\n            sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                marginBottom: '8px',\n            }}\n        >\n            <IconButton edge=\"start\" color=\"inherit\" onClick={() => { update_state({drawOpen: !state.drawOpen }); }} sx={{ mr: 2, ...(state.drawOpen&& { display: 'none' }) }}>\n            <Menu />\n        </IconButton>\n            <Typography variant=\"h6\" component=\"div\" sx={{\n                flexGrow: 1,\n                cursor: 'move',\n            }}\n                className=\"window-title\"\n                onClick={onActive}\n            >\n                虚拟机管理\n            </Typography>\n            <IconButton color=\"inherit\" onClick={onMinimize}>\n                <Minimize />\n            </IconButton>\n            {props.isMaximized ? (\n                <IconButton color=\"inherit\" onClick={onRestore}>\n                    <Restore />\n                </IconButton>\n            ) : (\n                <IconButton color=\"inherit\" onClick={onMaximize}>\n                    <Maximize />\n                </IconButton>\n            )}\n            <IconButton color=\"inherit\" onClick={onClose}>\n                <Close />\n            </IconButton>\n        </Toolbar>\n    </AppBar>\n        <Box p={2}\n             sx={{display:'flex'}}\n        >\n          {(!state.install_virt_manager||!state.run_virt_manager) &&\n           <Button onClick={install}>安装虚拟机管理</Button>\n          }\n          {state.install_dialog &&\n           <Dialog open={state.install_dialog} onClose={()=>console.log(\"close\")}>\n                    <DialogTitle>初始化</DialogTitle>\n                    <CustomDialogContent>\n                      <Install data={state.run_command} onEnd={check_install}/>\n                    </CustomDialogContent>\n                    <DialogActions>\n                    </DialogActions>\n\n           </Dialog>\n          }\n            \n             {false &&\n                <Drawer anchor=\"left\" open={state.drawOpen} onClose={() => {}}\n                    sx={{\n                        width: drawerWidth,\n                        flexShrink: 0,\n                        '& .MuiDrawer-paper': {\n                            width: drawerWidth,\n                            boxSizing: 'border-box',\n                        },\n                    }}\n                    variant=\"persistent\"\n                >\n                    <DrawerHeader>\n                        <IconButton onClick={() => { update_state({ drawOpen: !state.drawOpen }); }}>\n                            <ChevronLeft />\n                        </IconButton>\n                    </DrawerHeader>\n\n                    <Divider />\n                    <List>\n                        <ListItem button onClick={() => { update_state({ all_disk: true, show_pools: false }); }}>\n                            <ListItemIcon>\n                                <Home />\n                            </ListItemIcon>\n                            <ListItemText primary=\"所有虚拟机\" />\n                        </ListItem>\n                        <ListItem button onClick={add_virtual}>\n                            <ListItemIcon>\n                                <Settings />\n                            </ListItemIcon>\n                            <ListItemText primary=\"添加虚拟机\" />\n                        </ListItem>\n\n                    </List>\n                </Drawer>\n             }\n            <Container>\n                    <iframe src=\"http://192.168.2.123:8185/\" frameborder=\"0\" style={{\n                        border: \"0px\",\n                        width: \"100%\"\n                    }} allowfullscreen></iframe>\n\n    </Container>\n          {false&&\n          <Main open={state.drawOpen}>\n                {(state.run_virt_manager) &&\n                 <div>\n                    <iframe src=\"http://192.168.2.123:8185/\" frameborder=\"0\" style={{border:\"0px\",\n                                                                  width:\"100%\"\n                                                                 }} allowfullscreen></iframe>\n                 </div>\n            }\n                {state.openAddDialog &&\n                    <RenderAddDialog />\n            }\n          </Main>\n          }\n        </Box>\n    </>;*/\n};\n\nexport default VirtualMachine;\n","import { js2xml, xml2js } from 'xml-js';\nimport api from '../api';\n\nfunction long_cmd(command, callback = { stdout: null, stderr: null, onerr: null, onend:null }) {\n    let location = window.location;\n    let args = command;/*{\n        \"command\": \"/bin/bash\",\n        \"args\": [\"-c\", `cd ${config.dir} && docker compose up -d`]\n    };*/\n    let args_s = encodeURIComponent(JSON.stringify(args));\n    let socket = new WebSocket((location.protocol == \"http:\" ? \"ws://\" : \"wss://\") + location.host + \"/api/ws/shell?args=\" + args_s);\n    socket.onopen = () => {\n        socket.onclose = () => {\n            socket = null;\n            if(callback.onend) {\n                callback.onend();\n            }\n        };\n        socket.onmessage = (event) => {\n            console.log(event.data);\n            if (callback.stdout) {\n                callback.stdout(event.data);\n            }\n        };\n    };\n    socket.onerror = (err) => {\n        if (callback.onerr) {\n            callback.onerr(err);\n        }\n        socket = null;\n    };\n\n}\n\nconst qemu = {\n    command: \"qemu-system\",\n    arch: \"x86_64\",\n    async check_virt_manager() {\n        let p = {\n            command: \"./scripts/install_virt_manager.sh\",\n            args: [\"check\"]\n        };\n        return await api.run_command(p);\n    },\n    install_virt_manager(callback={stdout:null, stderr:null, onerr:null, onend:null}) {\n        long_cmd({\n            \"command\": \"./scripts/install_virt_manager.sh\",\n            args: [\"install_virt_manager\"],\n        }, callback);\n    },\n    run_virt_manager(callback = { stdout: null, stderr: null, onerr: null, onend: null }) {\n        long_cmd({\n            \"command\": \"./scripts/install_virt_manager.sh\",\n            args: [\"run_virt_manager\"],\n        }, callback);\n    },\n    async check_x11_bridge() {\n        let p = {\n            command: \"./scripts/install_x11_bridge.sh\",\n            args: [\"check\"]\n        };\n        return await api.run_command(p);\n    },\n    install_x11_bridge(callback = { stdout: null, stderr: null, onerr: null, onend: null }) {\n        long_cmd({\n            \"command\": \"./scripts/install_x11_bridge.sh\",\n            args: [\"install_x11_bridge\"],\n        }, callback);\n    },\n    run_x11_bridge(callback = { stdout: null, stderr: null, onerr: null, onend: null }) {\n        long_cmd({\n            \"command\": \"./scripts/install_x11_bridge.sh\",\n            args: [\"run_x11_bridge\"],\n        }, callback);\n    },\n    install(callback={stdout:null, stderr:null, onerr:null, onend:null}) {\n        long_cmd({\n            \"command\": \"./scripts/install_qemu.sh\",\n            args: [\"qemu\"],\n        }, callback);\n    },\n    template: {\n    },\n    parse_address(address) {\n        if(!address) return {};\n        let ret = {\n            \"address\": {\n                \"_attributes\": {\n                    \"type\": `${address.type}`,\n                    \"domain\": \"0x0000\",\n                    \"bus\": `${address.bus}`,\n                    \"port\": address?.port || undefined,\n                    \"function\": address?.['function'] || undefined,//`${address.function}`,\n                    \"multifunction\": address?.multifunction|| undefined\n                }\n            }\n        };\n        return ret;\n    },\n    parse_usb(v) {\n        let ret = {\n            \"controller\": {\n                \"_attributes\": {\n                    \"type\": \"usb\",\n                    \"index\": v?.index||\"0\",\n                    \"model\": `${v.model}`\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": v?.alias_name||`usb`\n                    }\n                },\n                ...this.parse_address(v.address)\n            }\n        };\n        if (v.master) {\n            ret[\"controller\"][\"master\"] = {\n                \"_attributes\": {\n                    \"startport\": `${v.master.startport}`\n                }\n            };\n        }\n        return ret;\n    },\n    parse_disk(v) {\n        let ret = {\n            \"disk\": {\n                \"_attributes\": {\n                    \"type\": \"file\",\n                    \"device\": \"disk\"\n                },\n                \"driver\": {\n                    \"_attributes\": {\n                        \"name\": \"qemu\",\n                        \"type\": `${v.type}`,\n                        \"cache\": \"writeback\"\n                    }\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"file\": `${v.filename}`,\n                        \"index\": `${v.boot_order}`\n                    }\n                },\n                \"backingStore\": {\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"dev\": \"hdc\",\n                        \"bus\": `${v.bus_options}`\n                    }\n                },\n                \"boot\": {\n                    \"_attributes\": {\n                        \"order\": `${v.boot_order}`\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": \"virtio_disk2\"\n                    }\n                },\n                ...this.parse_address(v?.address||{\n                    \"type\": \"pci\",\n                    \"bus\": \"0x03\",\n                    \"slot\": \"0x00\",\n                    \"function\": \"0x0\"\n                })\n            }\n        };\n        return ret;\n    },\n    parse_pci(v) {\n        let ret = {\n            \"controller\": {\n                \"_attributes\": {\n                    \"type\": `pci`,\n                    \"index\": `${v.index}`,\n                    \"model\": `${v.model}`\n                },\n                \"alias\": {\n                    \"_attributes\": `${v.alias_name}`,\n                },\n                ...this.parse_address(v?.address||{})\n                }\n        };\n        if(v.model_name) {\n            ret['controller'][\"model\"] = {\n                \"_attributes\": {\n                    \"name\": `${v.model_name}`\n                }\n            };\n        }\n        if(v.target) {\n            let target = v.target;\n            ret['controller'][\"target\"] = {\n                \"_attributes\": {\n                    \"classis\": `${target.classis}`,\n                    \"port\": `${target.port}`\n                }\n            };\n\n        }\n        return ret;\n    },\n    parse_network(v) {\n        let ret = {\n            \"interface\": {\n                \"_attributes\": {\n                    \"type\":v?.type||`bridge`\n                },\n                \"mac\": {\n                    \"_attributes\": {\n                        \"address\": `${v.mac}`\n                    }\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"bridge\": `${v.network}`\n                    }\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"dev\": `${v.target}`\n                    }\n                },\n                \"model\": {\n                    \"_attributes\": {\n                        \"type\": `${v.model}`\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": `${v.alias_name}`\n                    }\n                },\n                ...this.parse_address(v.address)\n            }\n        };\n        return ret;\n    },\n    parse_serial(v) {\n        let ret= {\n            \"serial\": {\n                \"_attributes\": {\n                    \"type\": `${v.type}`,\n                    \"tty\": v?.tty||undefined\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"path\": `${v.path}`\n                    }\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"type\": `${v.target_type}`,\n                        \"port\": `${v.port}`\n                    },\n                    \"model\": {\n                        \"_attributes\": {\n                            \"name\": `${v.target_type}`\n                        }\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": `${v.alias_name}`\n                    }\n                }\n            }\n        };\n        return ret;\n    },\n    parse_channel(v) {\n        let ret = {\n            'channel': {\n                \"_attributes\": {\n                    \"type\": \"unix\"\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"mode\": \"bind\",\n                        \"path\": `${v.path}`\n                    }\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"type\": \"virtio\",\n                        \"name\": \"org.qemu.guest_agent.0\",\n                        \"state\": \"disconnected\"\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": \"channel0\"\n                    }\n                },\n                ...this.parse_address(v.address)\n            }\n        };\n        return ret;\n    },\n    parse_input(v) {\n        let ret = {\n            'input': {\n                \"_attributes\": {\n                    \"type\": `${v.type}`,\n                    \"bus\": `${v.bus}`\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": `${v.alias_name}`\n                    }\n                },\n                ...this.parse_address(v.address)\n            }\n        };\n        return ret;\n    },\n    parse_console(_v) {\n        let ret = {\n            \"console\": {\n                \"_attributes\": {\n                    \"type\": \"pty\",\n                    \"tty\": \"/dev/pts/2\"\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"path\": \"/dev/pts/2\"\n                    }\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"type\": \"serial\",\n                        \"port\": 0\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": \"serial0\"\n                    }\n                }\n            }\n        };\n        return ret;\n    },\n    parse_config(config) {\n        console.log(\"config===\", config);\n        let usbs = [{\n            \"model\": \"ich9-ehci1\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x07\",\n                \"function\": \"0x0\",\n                \"multifunction\": \"on\"\n            }\n        },\n        {\n            \"model\": \"ich9-uhci1\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x07\",\n                \"function\": \"0x0\",\n            },\n            \"master\": {\n                \"startport\": 0\n            }\n        },\n        {\n            \"model\": \"ich9-uhci2\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x07\",\n                \"function\": \"0x1\",\n            },\n            \"master\": {\n                \"startport\": 2\n            }\n        },\n        {\n            \"model\": \"ich9-uhci3\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x07\",\n                \"function\": \"0x2\",\n            },\n            \"master\": {\n                \"startport\": 4\n            }\n        }\n        ].map(v => {\n            let ret = this.parse_usb(v);\n            return ret;\n        });\n        let disks = config.disks.map(v=> {\n            return this.parse_disk(v);\n        });\n        let cdrom = [{\n            bus:0,\n            target:0,\n            unit:0,\n            target_dev: \"hda\",\n            ...config.cdrom\n        }].map((v, index) => {\n            let ret = {\n                \"disk\": {\n                    \"_attributes\": {\n                        \"type\": \"file\",\n                        \"device\": \"cdrom\"\n                    },\n                    \"driver\": {\n                        \"_attributes\": {\n                            \"name\": \"qemu\",\n                            \"type\": \"raw\"\n                        }\n                    },\n                    \"source\": {\n                        \"_attributes\": {\n                            \"file\": `${v.filename}`,\n                            \"index\": `${index}`\n                        }\n                    },\n                    \"backingStore\": {\n                    },\n                    \"target\": {\n                        \"_attributes\": {\n                            \"dev\": `${v.target_dev}`,\n                            \"bus\": `${v.bus_options}`,\n                            \"tray\": \"open\"\n                        }\n                    },\n                    \"readonly\": {\n                    },\n                    \"boot\": {\n                        \"_attributes\": {\n                            \"order\": `${v.boot_order}`\n                        }\n                    },\n                    \"alias\": {\n                        \"_attributes\": {\n                            \"name\": `${v.bus_options}${v.bus}-${v.target}-${v.unit}`\n                        }\n                    }\n                }\n            };\n            return ret;\n        });\n        let sata=[{\n            \"type\": \"sata\",\n            \"alias_name\": \"ide\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slit\": \"0x1f\",\n                \"function\": \"0x2\"\n            }\n        }].map((v, index)=> {\n            let ret = {\n                \"controller\": {\n                    \"_attributes\": {\n                        \"type\": `${v.type}`,\n                        \"index\": `${index}`\n                    },\n                    \"alias\": {\n                        \"_attributes\": `${v.alias_name}`,\n                    },\n                    ...this.parse_address(v.address)\n                }\n            };\n            return ret;\n        });\n        let pcis = [{\n            \"model\": \"pcie-root\",\n            \"alias_name\": \"pcie.0\"\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.1\",\n            \"target\": {\n                \"chassis\": \"1\",\n                \"port\": \"0x10\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x0\",\n                \"multifunction\": \"on\"\n            }\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.2\",\n            \"target\": {\n                \"chassis\": \"2\",\n                \"port\": \"0x11\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x1\",\n            }\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.3\",\n            \"target\": {\n                \"chassis\": \"3\",\n                \"port\": \"0x12\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x2\",\n            }\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.4\",\n            \"target\": {\n                \"chassis\": \"4\",\n                \"port\": \"0x13\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x3\",\n            }\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.5\",\n            \"target\": {\n                \"chassis\": \"5\",\n                \"port\": \"0x14\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x4\",\n            }\n        }\n        ].map((v, index) => {\n            return this.parse_pci({ ...v, index });\n        });\n        let nics = [...config.nic].map((v, _index)=>{\n            return this.parse_network(v);\n        });\n        let serials = [{\n            \"type\": \"pty\",\n            \"path\": \"/dev/pts/2\",\n            \"alias_name\": \"serial0\",\n            \"port\": \"0\",\n            \"target_type\": \"isa-serial\"\n        },\n            {\n                \"type\": \"pty\",\n                \"path\": \"/dev/pts/2\",\n                \"tty\": \"/dev/pts/2\",\n                \"alias_name\": \"serial0\",\n                \"port\": \"0\",\n                \"target_type\": \"serial\"\n        }\n                      ].map(v=> {\n            return this.parse_serial(v);\n        });\n        let channels = [{\n            \"path\": \"org.qemu.guest_agent.0\"\n        }].map(v=> {\n            return this.parse_channel(v);\n        });\n        let consoles = [{\n        }].map(v=> {\n            return this.parse_console(v);\n        });\n        let inputs = [{\n            \"type\": \"tablet\",\n            \"bus\": \"usb\",\n            \"alias_name\": \"input0\",\n            \"address\": {\n                \"type\": \"usb\",\n                \"bus\": \"0\",\n                \"port\": \"1\"\n            }\n        },\n        {\n            \"type\": \"mouse\",\n            \"bus\": \"ps2\",\n            \"alias_name\": \"input1\"\n        },\n        {\n            \"type\": \"keyboard\",\n            \"bus\": \"ps2\",\n            \"alias_name\": \"input2\"\n        }\n        ].map(v => {\n            return this.parse_input(v);\n        });\n        let common = {\n            ...this.template,\n            \"name\": {\n                \"_text\": `${config.name}`\n            },\n            \"metadata\": {\n            },\n            \"memory\": {\n                \"_attributes\": {\n                    \"unit\": \"KiB\"\n                },\n                \"_text\": `${config.memory*1024}`\n            },\n            \"currentMemory\": {\n                \"_attributes\": {\n                    \"unit\": \"KiB\"\n                },\n                \"_text\": `${config.memory*1024}`\n            },\n            \"vcpu\": {\n                \"_attributes\": {\n                    \"placement\": \"static\"\n                },\n                \"_text\": `${config.smp}`\n            },\n            \"cputune\": {\n                \"vcpuin\": [{\n                    \"_attributes\": {\n                        \"vcpu\": `${0}`,\n                        \"cpuset\": `${0}`\n                    }\n                }]\n            },\n            \"os\": {\n                \"type\": {\n                    \"_attributes\": {\n                        \"arch\": \"x86_64\",\n                        \"machine\": `${config.machine}`\n                    },\n                    \"_text\": \"hvm\"\n                },\n                \"loader\": {\n                    \"_attributes\": {\n                        \"readonly\": \"yes\",\n                        \"type\": \"pflash\"\n                    },\n                    \"_text\": \"/usr/share/qemu/ovmf-x64/OVMF_CODE-pure-efi.fd\"\n                },\n                \"nvram\": {\n                    \"_text\": \"/etc/libvirt/qemu/nvram/99c36dce-e5af-5de4-b61f-17ea21137658_VARS-pure-efi.fd\"\n                }\n            },\n            \"features\": {\n                \"acpi\":{},\n                \"apic\":{},\n            },\n            \"cpu\": {\n                \"_attributes\": {\n                    \"mode\": 'host-passthrough',\n                    \"check\": 'none',\n                    migratable: 'on'\n                },\n                \"topology\": {\n                    \"_attributes\": {\n                        \"sockets\": \"1\",\n                        \"dies\": \"1\",\n                        \"cores\": \"1\",\n                        \"threads\": \"1\"\n                    }\n                },\n                \"cache\": {\n                    \"_attributes\": {\n                        \"mode\": \"passthrough\"\n                    }\n                }\n            },\n            \"clock\": {\n                \"_attributes\": {\n                    \"offset\": \"utc\"\n                },\n                \"timer\":[\n                    {\n                        \"_attributes\": {\n                            \"name\": \"rtc\",\n                            \"tickpolicy\":'catchup'\n                        }\n                    },\n                    {\n                        \"_attributes\": {\n                            \"name\": \"pit\",\n                            \"tickpolicy\": \"delay\"\n                        }\n                    },\n                    {\n                        \"_attributes\": {\n                            \"name\": \"hpet\",\n                            \"tickpolicy\": \"no\"\n                        }\n                    }\n                ]\n            },\n            \"on_poweroff\": {\n                \"_text\": \"destroy\"\n            },\n            \"on_reboot\": {\n                \"_text\": \"restart\"\n            },\n            \"on_crash\": {\n                \"_text\": \"restart\"\n            },\n            \"devices\": {\n                \"emulator\": {\n                    \"_text\": \"/usr/local/sbin/qemu\"\n                },\n                \"disk\": [\n                    ...disks,\n                ],\n                \"cdrom\": [\n                    ...cdrom\n                ],\n                ...usbs,\n                ...sata,\n                ...pcis,\n                ...nics,\n                ...serials,\n                ...channels,\n                ...consoles,\n                ...inputs\n            }\n        };\n        let ret = js2xml(common, { compact: true, ignoreComment: true, spaces: 4 });\n        console.log(\"ret==\", ret);\n    }\n\n};\n\nexport default qemu;\n"],"names":["CommonWindow","forwardRef","props","ref","onActive","onClose","onRestore","onMaximize","onMinimize","_jsxs","_Fragment","children","_jsx","AppBar","sx","position","Toolbar","display","alignItems","justifyContent","marginBottom","Typography","variant","component","flexGrow","cursor","className","onClick","title","IconButton","color","Minimize","isMaximized","Restore","Maximize","Close","JSONEditor","window","Disk_Select","_JSONEditor$AbstractE","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_this","self","this","header","label","theme","getFormInputLabel","getTitle","isRequired","container","appendChild","disks","options","div","document","createElement","append","view_root","ReactDOM","rix_init_flag","onChange","e","v","preventDefault","setValue","used_disks","rix_make_watch_data","used","cur_path","parent","schema","uniqueItems","cur_list","jsoneditor","watch","path","list","getValue","map","set","set_model","pr","getEditor","v2","model","filter","global_data","defaults","MyRender","_useState","useState","_useState2","_slicedToArray","setOptions","_useState3","_useState4","get","useEffect","set_options","list_options","name","length","unwatch","Autocomplete","freeSolo","getOptionLabel","option","disk","concat","size","renderInput","params","TextField","_objectSpread","render","init","fromTemplate","refreshValue","_this2","setTimeout","unmount","AbstractEditor","JsonEditorForm","editorRef","callbacks","useRef","containerRef","useData","editors","disk_select","resolvers","unshift","type","format","current","on","data","destroy","useImperativeHandle","Install","styled","DialogContent","width","shouldForwardProp","prop","_ref","open","padding","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","easeOut","enteringScreen","MuiAppBar","_ref2","_ref3","mixins","toolbar","terminal","shell_ref","Terminal","rows","convertEol","scrollback","disableStdin","cursorStyle","cursorBlink","fitAddon","FitAddon","loadAddon","onResize","fit","qemu","op","stdout","out","console","log","write","stderr","err","onerr","onend","onEnd","Box","height","_useData","api","install_virt_manager","run_virt_manager","install_dialog","drawOpen","run_cmd","openAddDialog","json_editor_option","disable_edit_json","disable_properties","disable_collapse","no_additional_properties","required_by_default","state","setState","update_state","prev","check","_ref4","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ret","wrap","_context","next","sent","includes","stop","install","run_command","CustomDialogContent","location","virtual_url","host","Container","Button","src","frameborder","style","border","bottom","left","right","allowfullscreen","Dialog","DialogTitle","_callee2","_context2","DialogActions","long_cmd","command","callback","undefined","args","args_s","encodeURIComponent","JSON","stringify","socket","WebSocket","protocol","onopen","onclose","onmessage","event","onerror","arch","check_virt_manager","p","abrupt","check_x11_bridge","install_x11_bridge","run_x11_bridge","template","parse_address","address","bus","port","multifunction","parse_usb","index","alias_name","master","startport","parse_disk","filename","boot_order","bus_options","parse_pci","model_name","target","classis","parse_network","mac","network","parse_serial","tty","target_type","parse_channel","parse_input","parse_console","_v","parse_config","config","usbs","cdrom","unit","target_dev","sata","pcis","nics","_toConsumableArray","nic","_index","serials","channels","consoles","inputs","common","memory","smp","machine","migratable","js2xml","compact","ignoreComment","spaces"],"sourceRoot":""}