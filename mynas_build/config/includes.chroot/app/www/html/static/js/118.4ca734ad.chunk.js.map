{"version":3,"file":"static/js/118.4ca734ad.chunk.js","mappings":"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","sources":["components/JsonEditorForm.js"],"sourcesContent":["import React, {useState, useEffect, useRef, useContext, forwardRef, useImperativeHandle, Fragment } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { useData,rix_make_watch_data } from \"../store/global_data.js\";\nimport {Autocomplete, TextField} from '@mui/material';\n\nlet JSONEditor = window.JSONEditor;\n\n\nclass Disk_Select extends JSONEditor.AbstractEditor{\n    build() {\n        let value = this.value;\n        let self = this;\n        this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());\n        this.container.appendChild(this.title);\n        let disks = this.options.disks;\n        this.disks = disks;\n        const div = document.createElement('div');\n        this.container.append(div);\n        this.view_root = ReactDOM.createRoot(div);\n        this.rix_init_flag = false;\n        let onChange = (e, v)=> {\n            e.preventDefault();\n            this.setValue(v, false, false);\n        };\n        this.used_disks = rix_make_watch_data({used:[], cur_path:''});\n        if(this.parent.parent&&this.parent.parent.schema.uniqueItems) {\n            let cur_list = this.parent.parent;\n            this.jsoneditor.watch(cur_list.path, ()=> {\n                let v2 = cur_list.getValue();\n                let list = v2.map(v=>v.path);\n                this.used_disks.set('used', list);\n            });\n        }\n        this.set_model = (v)=> {\n            if (self.parent && self.parent.jsoneditor) {\n                let pr = self.parent.jsoneditor.getEditor(self.parent.path + '.model');\n                if (pr && self.disks) {\n                    let v2 = v;\n                    let model = self.disks.filter(v => v.path == v2)[0];\n                    if (model) {\n                        pr.setValue(model.model);\n                    }\n                }\n            }\n        };\n        this.used_disks.watch('cur_path', this.set_model);\n        const {global_data} = this.defaults;//useData();\n        let MyRender = ()=> {\n            const [options, setOptions] = useState([]);\n            const [value, setValue] = useState('');\n            if(!disks) disks = global_data.get('blockdevices');\n            this.disks = disks;\n            useEffect(() => {\n                let set_options = (v2)=> {\n                    let list_options = disks.map(v=>v.path);\n                    list_options = list_options.filter(v=> {\n                        return v2.filter(name=>name==v).length == 0;\n                    });\n                    setOptions(list_options);\n                };\n                this.used_disks.watch('used', set_options);\n                let set_v = (v2)=> {\n                    setValue(v2);\n                    this.set_model(v2);\n                };\n                set_options(this.used_disks.get('used'));\n                set_v(this.used_disks.get('cur_path'));\n                //this.used_disks.watch('cur_path', set_v);\n                return ()=> {\n                    this.used_disks.unwatch('used', set_options);\n                    //this.used_disks.unwatch('cur_path', set_v);\n                };\n            },[]);\n            return <Autocomplete\n                     freeSolo\n                     value={value}\n                     onChange={onChange}\n                     options={options}\n                     getOptionLabel={(option) => {\n                         let disk = disks.filter(v=>v.path == option)[0];\n                         if(disk) {\n                             let v = `${disk.model}(${disk.size}) at ${disk.path}`;\n                             return v;\n                         }\n                         return \"\";\n                     }}\n                     renderInput={(params) => {\n                                               return <TextField {...params} label=\"选择磁盘\" />;\n                                              }}\n                   />;\n        };\n        this.view_root.render(<MyRender/>);\n    }\n    setValue(v, init, fromTemplate) {\n        this.value = v;\n        this.refreshValue();\n        this.used_disks.set(\"cur_path\", v);\n        this.onChange(true);\n    }\n    getValue() {\n        return this.value;\n    }\n    destroy() {\n        this.used_disks.unwatch(this.set_model);\n        setTimeout(()=> {\n        this.view_root.unmount();\n        });\n    }\n}\nconst JsonEditorForm = forwardRef((props, ref) => {\n    const { schema, callbacks} = props;\n    const editorRef = useRef(null);\n    const containerRef = useRef(null);\n    const {global_data} = useData();\n    JSONEditor.defaults.editors.disk_select= Disk_Select;\n    JSONEditor.defaults.global_data = global_data;\n    //JSONEditor.defaults.options.keep_oneof_values = false;\n    JSONEditor.defaults.resolvers.unshift(function (schema) {\n        if (schema.type === 'string' && schema.format === 'disk_select') {\n            return 'disk_select';\n        }\n    });\n    //if(editorRef.current&&props.data) {\n    //    editorRef.current.setValue(props.data);\n    //}\n    useEffect(() => {\n        //if(editorRef.current) return;\n        let options = {\n            schema,\n            theme: 'bootstrap4',\n            //iconlib: 'fontawesome4',\n            ...props.options\n            //disable_collapse: true,\n            //disable_edit_json: true,\n            //disable_properties: true,\n            //no_additional_properties: true,\n            //required_by_default: true,\n        };\n        editorRef.current = new JSONEditor(containerRef.current, options);\n        editorRef.current.on('ready',() => {\n            // Now the api methods will be available\n            if(props.data)\n            editorRef.current.setValue(props.data);\n        });\n        return () => {\n            if (editorRef.current) {\n                editorRef.current.destroy();\n            }\n        };\n    }, [schema,props]);\n\n    const getValue = () => {\n        return editorRef.current.getValue();\n    };\n\n    useImperativeHandle(ref, () => ({\n        getValue,\n    }));\n\n    return (\n        <div ref={containerRef} {...props}/>\n    );\n});\nexport default JsonEditorForm;\n"],"names":["JSONEditor","window","Disk_Select","_JSONEditor$AbstractE","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_this","self","this","title","header","label","theme","getFormInputLabel","getTitle","isRequired","container","appendChild","disks","options","div","document","createElement","append","view_root","ReactDOM","rix_init_flag","onChange","e","v","preventDefault","setValue","used_disks","rix_make_watch_data","used","cur_path","parent","schema","uniqueItems","cur_list","jsoneditor","watch","path","list","getValue","map","set","set_model","pr","getEditor","v2","model","filter","global_data","defaults","MyRender","_useState","useState","_useState2","_slicedToArray","setOptions","_useState3","_useState4","get","useEffect","set_options","list_options","name","length","unwatch","_jsx","Autocomplete","freeSolo","getOptionLabel","option","disk","concat","size","renderInput","params","TextField","_objectSpread","render","init","fromTemplate","refreshValue","_this2","setTimeout","unmount","AbstractEditor","JsonEditorForm","forwardRef","props","ref","editorRef","callbacks","useRef","containerRef","useData","editors","disk_select","resolvers","unshift","type","format","current","on","data","destroy","useImperativeHandle"],"sourceRoot":""}