{"version":3,"file":"static/js/121.10e2a34d.chunk.js","mappings":"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","sources":["components/BlockDevice.js","components/Home.js","components/JsonEditorForm.js","components/Pools.js","utils/bcachefs.js"],"sourcesContent":["import React, { useState, useEffect, useRef,useContext } from 'react';\n//import api from '../api';\nimport { styled } from '@mui/system';\nimport { Table, Pagination, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, TableContainer,\n         TableHead,\n         TableRow,\n         TableCell,\n         TableBody,\n         Paper,\n         TablePagination,\n       } from '@mui/material';\n\nimport {useData} from \"../store/global_data.js\";\n\n\nfunction BlockDevice(props){\n    const [disks, update_disks] = useState([]);\n    const [data, update_data] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [poolstatus, set_poolstatus] = useState({online:false,\n                                                   status_text: \"离线\"\n                                                  });\n    const [filter, setFilter] = useState('');\n    const filteredData = disks.filter((row) => {\n        return Object.values(row).some((value) => {\n            return value.toString().toLowerCase().includes(filter.toLowerCase());\n        });\n    });\n    const {global_data, api} = useData();\n    //disks = data;\n    //merger_data(global_data.get('sysstat', []));\n    useEffect(()=> {\n        let blockdevices = global_data.get('blockdevices');\n        let sysdata_update = (v)=> {\n            let blockdevices = global_data.get('blockdevices');\n            //let v = global_data.get('sysstat', []);\n            //Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd\n            let label = data;\n            let old_data = disks;\n            let status = v;//v.hosts[0].statistics[0].disk;\n            label.forEach(one=>{\n                let d = status.filter(v=>{\n                    if(one.path == `/dev/${v.Device}`) return true;\n                    return false;\n                })[0];\n                if(!blockdevices) return;\n                let block = blockdevices.filter(v=>v.path === one.path)[0];\n                if(d&&block) {\n                    let index = old_data.findIndex(v=>v.path == one.path);\n                    if(index >= 0) {\n                        old_data.splice(index, 1, {\n                            ...block,\n                            id: one.path,\n                            ...d\n                        });\n                    } else {\n                        old_data.push({\n                            ...block,\n                            id: one.path,\n                            ...d\n                        });\n                    }\n                }\n            });\n            update_disks([...old_data]);\n        };\n        //sysdata_update([]);\n        global_data.watch('sysstat', sysdata_update);\n        update_disks(data);\n        return ()=> {\n            global_data.unwatch('sysstat', sysdata_update);\n        };\n    },[data]);\n    useEffect(()=> {\n        console.log(\"props===\", props);\n        if(props.data)\n        update_data(props.data);\n    },[props.data]);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value);\n    };\n    const handleEditClick = (parameter) => {\n    };\n    return <>\n         <TableContainer component={Paper}>\n           <Table>\n             <TableHead>\n               <TableRow>\n                 <TableCell>设备</TableCell>\n                 <TableCell>PATH</TableCell>\n                 <TableCell>标识</TableCell>\n                 <TableCell>容量</TableCell>\n                 <TableCell>读取</TableCell>\n                 <TableCell>写入</TableCell>\n               </TableRow>\n             </TableHead>\n             <TableBody>\n               {filteredData\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => (\n                    <TableRow key={row.path}>\n                      <TableCell>\n                        { props.onDown &&\n                        <Button onClick={() => props.onDown(row)}>下线</Button>\n                        }\n                        { props.onAdd&&props.check_add_status&&props.check_add_status(row) &&\n                          <Button onClick={() => props.onAdd(row)}>添加到池</Button>\n                        }\n                        { props.onRemove &&\n                        <Button onClick={() => props.onRemove(row)}>移除</Button>\n                        }\n                      </TableCell>\n                      <TableCell>{row.path}</TableCell>\n                      <TableCell>{row.model} {row.serial} {row.size}</TableCell>\n                      <TableCell>{row.size}</TableCell>\n                      <TableCell>{row[\"kB_read/s\"]}</TableCell>\n                      <TableCell>{row[\"kB_wrtn/s\"]}</TableCell>\n                    </TableRow>\n                ))}\n             </TableBody>\n           </Table>\n         </TableContainer>\n         <TablePagination\n           component=\"div\"\n           count={filteredData.length}\n           page={page}\n           onPageChange={handleChangePage}\n           rowsPerPage={rowsPerPage}\n           onRowsPerPageChange={handleChangeRowsPerPage}\n           style={{ marginTop: '1rem' }}\n         />\n       </>;\n};\n\nexport default BlockDevice;\n","import React, { useState, useEffect, useRef,useContext } from 'react';\nimport api from '../api';\nimport JsonEditorForm from './JsonEditorForm';\nimport Pool from './Pools';\nimport { styled } from '@mui/system';\nimport { Table, Pagination, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, TableContainer,\n         TableHead,\n         TableRow,\n         TableCell,\n         TableBody,\n         Paper,\n         TablePagination,\n         Modal\n       } from '@mui/material';\n\nimport bcachefs from '../utils/bcachefs';\nimport {DataContext} from \"../store/global_data.js\";\nimport BlockDevice from \"./BlockDevice\";\n\nconst Home = ()=>{\n    const [disks, set_disks] = useState([]);\n    const [pools, setPools] = useState([]);\n    const [data, setData] = useState({id:0,key:'',status:0,type:0,value:'', parent_id:0});\n    const [loading, setLoading] = useState(true);\n    const global_data = useContext(DataContext);\n    const [schema, setSchema] = useState({});\n    const [openAddDialog, setOpenAddDialog] = useState(false);\n    useEffect(() => {\n        let my_set = (v)=> {\n            set_disks(v);\n        };\n        global_data.watch('blockdevices',my_set);\n        let v = global_data.get('pools', [], async ()=> {\n            let read_ret = await api.config_file({filename:'config/pools.config', 'op':\"get\"});\n            if(read_ret.ret == 0) {\n                let pools = JSON.parse(read_ret.data);\n                setPools(pools);\n                global_data.set('pools', pools);\n            }\n        });\n        setPools(v);\n        let my_set_pool = (v)=> {\n            console.log(\"update pools=\", v);\n            setPools([...v]);\n            console.log(\"after pools=\", pools);\n        };\n        console.log(\"watch pools\");\n        global_data.watch('pools', my_set_pool);\n        api.disk_info({});\n        return () => {\n            global_data.unwatch('blockdevices',my_set);\n            console.log(\"unwatch pools\");\n            global_data.unwatch('pools', my_set_pool);\n        };\n    }, []);\n\n    const jsonEditorFormRef = useRef(null);\n    let obj = {};\n    const add_pool = (e) => {\n        e.preventDefault();\n        let aschema = schema;\n        setSchema({\n        \"$ref\": \"#/definitions/bcachefs_config\",\n        \"definitions\": {\n            \"bcachefs_label\": {\n                \"type\": \"array\",\n                \"title\": \"标签配置\",\n                \"uniqueItems\": true,\n                \"items\": {\n                    \"type\": \"object\",\n                    \"headerTemplate\": \"\\{\\{self.name\\}\\}=\\{\\{self.path\\}\\}\",\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"string\",\n                            \"default\": \"\",\n                            \"title\": \"label_name\",\n                        },\n                        \"path\": {\n                            \"type\": \"string\",\n                            \"format\": \"disk_select\",\n                            \"title\": \"设备\"\n                        },\n                        \"model\": {\n                            \"type\": \"string\",\n                            \"title\": \"硬盘\",\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        }\n                    },\n                    \"required\": [\"name\", \"path\", \"model\"]\n                }\n            },\n            \"bcachefs_config\": {\n                type: \"object\",\n                properties: {\n                    \"op\": {\n                        \"type\": \"string\",\n                        \"default\": \"addpool\",\n                        \"options\": {\n                            \"hidden\": true\n                        }\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"title\": \"名称\",\n                        \"default\": \"pool\"\n                    },\n                    compression: {\n                        \"type\": \"string\",\n                        \"title\": \"压缩方式\",\n                        \"enum\": [\"none\", \"lz4\", \"gzip\", \"zstd\"],\n                        \"default\": \"none\",\n                        \"options\": {\n                            \"enum_titles\": [\n                                \"none\",\n                                \"lz4\",\n                                \"gzip\",\n                                \"zstd\"\n                            ]\n                        }\n                    },\n                    \"encrypted\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"加密\",\n                        \"default\": false\n                    },\n                    \"replicas\": {\n                        \"type\": \"integer\",\n                        \"title\": \"数据副本数量\",\n                        \"default\": 1\n                    },\n                    \"foreground_target\": {\n                        \"type\": \"string\",\n                        \"title\": \"前端设备标签\",\n                        \"default\": \"\"\n                    },\n                    \"promote_target\": {\n                        \"type\": \"string\",\n                        \"title\": \"promote_target设备标签\",\n                        \"default\": \"\"\n                    },\n                    \"background_target\": {\n                        \"type\": \"string\",\n                        \"title\": \"后端设备标签\",\n                        \"default\": \"\"\n                    },\n                    \"label\": {\n                        \"title\": \"存储标签设置\",\n                        \"$ref\": \"#/definitions/bcachefs_label\"\n                    },\n                    \"auto_mount\": {\n                        \"type\": \"boolean\",\n                        \"title\": \"自动挂载\",\n                        \"default\": false\n                    },\n                    \"mount_path\": {\n                        \"type\": \"string\",\n                        \"title\": \"挂载路径\",\n                        \"default\": \"/mnt\"\n                    }\n                },\n                required: [\n                    //\"possible_colors\", \"primary_color\",\n                    \"op\",\n                    \"name\",\n                    \"compression\", \"encrypted\", \"replicas\", \"foreground_target\", \"promote_target\", \"background_target\", \"label\", \"auto_mount\", \"mount_path\"]\n            }\n        }\n    });\n        setOpenAddDialog(true);\n    };\n\n    const handleCloseAddDialog = () => {\n        setOpenAddDialog(false);\n    };\n\n\n    const handleSaveAddDialog = async () => {\n        try {\n            const config = jsonEditorFormRef.current.getValue();\n            console.log(\"save===\", config);\n            switch(config.op) {\n            case 'add_device_to_pool': {\n                console.log(\"add device to pool\", config);\n                let pool_index = pools.findIndex(v=>v.name == config.pool);\n                let pool = null;\n                if(pool_index >= 0)\n                    pool = pools[pool_index];\n                let add_ret = await api.run_command({\n                    ...bcachefs.device.add({...config,\n                                            mount_path: pool.mount_path\n                                           }),\n                });\n                if(add_ret.ret == 0) {\n                    let index = pool.label.findIndex(v=>v.path == config.device);\n                    if(index >= 0) {\n                        pool.label.splice(index,1, {...pool.label[index],name:config.label, path: config.device});\n                    } else {\n                        pool.label.push({name: config.label, path: config.device});\n                    }\n                    let write_ret = await api.config_file({filename:'config/pools.config', 'op':\"put\", data: JSON.stringify(pools)});\n                    if(write_ret.ret == 0) {\n                        global_data.set('pools', pools);\n                        setOpenAddDialog(false);\n                    }\n                }\n            }\n                break;\n            case 'addpool': {\n                let format_ret = await api.run_command({\n                    ...bcachefs.format(config),\n                    config\n                });\n                console.log(\"format_ret===\", format_ret);\n                if(format_ret.ret == 0) {\n                    let name = config.name;\n                    let cur_pools = pools;\n                    let index = cur_pools.findIndex(v=>v.name == name);\n                    if(index>=0) {\n                        cur_pools.split(index, 1, config);\n                    } else {\n                        cur_pools.push(config);\n                    }\n                    global_data.set('pools', cur_pools);\n                    let write_config_ret = await api.config_file({op:'put', filename:'config/pools.config', data: JSON.stringify(cur_pools)});\n                    if(write_config_ret.ret == 0) {\n                        console.log(\"write_config ok=\", write_config_ret);\n                    }\n                    if(config.auto_mount == true) {\n                        let mount_ret = await api.run_command({\n                            ...bcachefs.mount(config),\n                            config,\n                        });\n                        console.log(\"mount_ret===\", mount_ret);\n                    }\n                }\n            }\n                break;\n            }\n        } catch (error) {\n            console.error('Error saving parameter:', error);\n        }\n    };\n\n    const CustomDialogContent = styled(DialogContent)({\n        width: '80%',\n    });\n    const RenderAddDialog = () => {\n        return (\n            <Dialog open={openAddDialog} onClose={handleCloseAddDialog} fullWidth maxWidth=\"md\">\n              <DialogTitle>添加参数</DialogTitle>\n              <CustomDialogContent>\n                <JsonEditorForm schema={schema} ref={jsonEditorFormRef} data={data}/>\n              </CustomDialogContent>\n              <DialogActions>\n                <Button onClick={handleSaveAddDialog}>保存</Button>\n                <Button onClick={handleCloseAddDialog}>取消</Button>\n              </DialogActions>\n            </Dialog>\n        );\n    };\n\n    const MyTest = ()=> {\n        if(openAddDialog) {\n            return <div>\n            <JsonEditorForm schema={schema} ref={jsonEditorFormRef} data={data}/>\n                   </div>;\n        } else {\n            return <></>;\n        }\n    };\n    const test = async ()=> {\n        let disk_config = await api.config_file({filename:'disk.config', op:'get'});\n        console.log(\"disk_config==\", disk_config);\n        if(disk_config.ret == -2) {\n            let d_w_ret = await api.config_file({filename:'disk.config', op:'put', data:JSON.stringify({\n                blockdevices:global_data.get('blockdevices')\n            })});\n            console.log(\"d_w_ret=\", d_w_ret);\n        }\n    };\n    let onAdd = (row)=> {\n        console.log(\"onAdd\");\n        let pool_names = pools.map(v=>{return v.name;});\n        console.log(\"pools==\", pool_names);\n        setSchema({\n            \"$ref\": \"#/definitions/config\",\n            \"definitions\": {\n                \"config\": {\n                    \"type\": \"object\",\n                    \"title\": \"加入到池\",\n                    \"properties\": {\n                        \"op\": {\n                            \"type\": \"string\",\n                            \"default\": \"add_device_to_pool\",\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"device\": {\n                            \"type\": \"string\",\n                            \"default\": row.path,\n                            \"options\": {\n                                \"hidden\": true\n                            }\n                        },\n                        \"pool\": {\n                            \"type\": \"string\",\n                            \"title\": \"池名字\",\n                            \"enum\":pool_names,\n                            \"options\": {\n                                \"enum_titles\":pool_names\n                            }\n                        },\n                        \"label\": {\n                            \"type\": \"string\",\n                            \"title\": \"标签\",\n                            \"default\": \"\"\n                        },\n                        \"fs_size\": {\n                            \"type\": \"string\",\n                            \"title\": \"fs_size\",\n                            \"default\": \"\"\n                        },\n                        \"discard\": {\n                            \"type\": \"boolean\",\n                            \"title\": \"discard\",\n                            \"default\": false\n                        },\n                        \"bucket\": {\n                            \"type\": \"string\",\n                            \"title\": \"bucket\",\n                            \"default\": \"\"\n                        }\n                    },\n                    \"required\": [\n                        \"op\",\n                        \"device\",\n                        \"pool\",\n                        \"label\",\n                        \"fs_size\",\n                        \"discard\",\n                        \"bucket\",\n                    ]\n                }\n            }\n        });\n        setOpenAddDialog(true);\n    };\n    let check_add_status = (row)=> {\n        for(let pool of pools) {\n            let index = pool.label.findIndex(v=>v.path == row.path);\n            if(index >= 0) return false;\n        }\n        return true;\n    };\n    let Rend_Pool = ()=> {\n        let ret = [];\n        for(let v of pools) {\n            ret.push(<Pool data={v} key={v}/>);\n        }\n        return ret;\n    };\n    return (\n        <div>\n          <Button onClick={add_pool}>添加池</Button>\n          <Button onClick={test}>test</Button>\n          <RenderAddDialog/>\n          <Rend_Pool/>\n          <BlockDevice data={disks} onAdd={onAdd} check_add_status={check_add_status}/>\n        </div>\n    );\n};\n\nexport default Home;\n","import React, {useState, useEffect, useRef, useContext, forwardRef, useImperativeHandle, Fragment } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { useData,rix_make_watch_data } from \"../store/global_data.js\";\nimport {Autocomplete, TextField} from '@mui/material';\n\nlet JSONEditor = window.JSONEditor;\n\n\nclass Disk_Select extends JSONEditor.AbstractEditor{\n    build() {\n        let value = this.value;\n        let self = this;\n        this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired());\n        this.container.appendChild(this.title);\n        let disks = this.options.disks;\n        this.disks = disks;\n        const div = document.createElement('div');\n        this.container.append(div);\n        this.view_root = ReactDOM.createRoot(div);\n        this.rix_init_flag = false;\n        let onChange = (e, v)=> {\n            e.preventDefault();\n            this.setValue(v, false, false);\n        };\n        this.used_disks = rix_make_watch_data({used:[], cur_path:''});\n        if(this.parent.parent&&this.parent.parent.schema.uniqueItems) {\n            let cur_list = this.parent.parent;\n            this.jsoneditor.watch(cur_list.path, ()=> {\n                let v2 = cur_list.getValue();\n                let list = v2.map(v=>v.path);\n                this.used_disks.set('used', list);\n            });\n        }\n        this.set_model = (v)=> {\n            if (self.parent && self.parent.jsoneditor) {\n                let pr = self.parent.jsoneditor.getEditor(self.parent.path + '.model');\n                if (pr && self.disks) {\n                    let v2 = v;\n                    let model = self.disks.filter(v => v.path == v2)[0];\n                    if (model) {\n                        pr.setValue(model.model);\n                    }\n                }\n            }\n        };\n        this.used_disks.watch('cur_path', this.set_model);\n        const {global_data} = this.defaults;//useData();\n        let MyRender = ()=> {\n            const [options, setOptions] = useState([]);\n            const [value, setValue] = useState('');\n            if(!disks) disks = global_data.get('blockdevices');\n            this.disks = disks;\n            useEffect(() => {\n                let set_options = (v2)=> {\n                    let list_options = disks.map(v=>v.path);\n                    list_options = list_options.filter(v=> {\n                        return v2.filter(name=>name==v).length == 0;\n                    });\n                    setOptions(list_options);\n                };\n                this.used_disks.watch('used', set_options);\n                let set_v = (v2)=> {\n                    setValue(v2);\n                    this.set_model(v2);\n                };\n                set_options(this.used_disks.get('used'));\n                set_v(this.used_disks.get('cur_path'));\n                //this.used_disks.watch('cur_path', set_v);\n                return ()=> {\n                    this.used_disks.unwatch('used', set_options);\n                    //this.used_disks.unwatch('cur_path', set_v);\n                };\n            },[]);\n            return <Autocomplete\n                     freeSolo\n                     value={value}\n                     onChange={onChange}\n                     options={options}\n                     getOptionLabel={(option) => {\n                         let disk = disks.filter(v=>v.path == option)[0];\n                         if(disk) {\n                             let v = `${disk.model}(${disk.size}) at ${disk.path}`;\n                             return v;\n                         }\n                         return \"\";\n                     }}\n                     renderInput={(params) => {\n                                               return <TextField {...params} label=\"选择磁盘\" />;\n                                              }}\n                   />;\n        };\n        this.view_root.render(<MyRender/>);\n    }\n    setValue(v, init, fromTemplate) {\n        this.value = v;\n        this.refreshValue();\n        this.used_disks.set(\"cur_path\", v);\n        this.onChange(true);\n    }\n    getValue() {\n        return this.value;\n    }\n    destroy() {\n        this.used_disks.unwatch(this.set_model);\n        setTimeout(()=> {\n        this.view_root.unmount();\n        });\n    }\n}\nconst JsonEditorForm = forwardRef((props, ref) => {\n    const { schema, callbacks} = props;\n    const editorRef = useRef(null);\n    const containerRef = useRef(null);\n    const {global_data} = useData();\n    JSONEditor.defaults.editors.disk_select= Disk_Select;\n    JSONEditor.defaults.global_data = global_data;\n    //JSONEditor.defaults.options.keep_oneof_values = false;\n    JSONEditor.defaults.resolvers.unshift(function (schema) {\n        if (schema.type === 'string' && schema.format === 'disk_select') {\n            return 'disk_select';\n        }\n    });\n    //if(editorRef.current&&props.data) {\n    //    editorRef.current.setValue(props.data);\n    //}\n    useEffect(() => {\n        //if(editorRef.current) return;\n        let options = {\n            schema,\n            theme: 'bootstrap4',\n            //iconlib: 'fontawesome4',\n            ...props.options\n            //disable_collapse: true,\n            //disable_edit_json: true,\n            //disable_properties: true,\n            //no_additional_properties: true,\n            //required_by_default: true,\n        };\n        editorRef.current = new JSONEditor(containerRef.current, options);\n        editorRef.current.on('ready',() => {\n            // Now the api methods will be available\n            if(props.data)\n            editorRef.current.setValue(props.data);\n        });\n        return () => {\n            if (editorRef.current) {\n                editorRef.current.destroy();\n            }\n        };\n    }, [schema,props]);\n\n    const getValue = () => {\n        return editorRef.current.getValue();\n    };\n\n    useImperativeHandle(ref, () => ({\n        getValue,\n    }));\n\n    return (\n        <div ref={containerRef} {...props}/>\n    );\n});\nexport default JsonEditorForm;\n","import React, { useState, useEffect, useRef,useContext } from 'react';\nimport { styled } from '@mui/system';\nimport { Table, Pagination, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, TableContainer,\n         TableHead,\n         TableRow,\n         TableCell,\n         TableBody,\n         Paper,\n         TablePagination,\n       } from '@mui/material';\nimport bcachefs from '../utils/bcachefs.js';\nimport {useData} from \"../store/global_data.js\";\nimport BlockDevice from \"./BlockDevice\";\n\nfunction Pool(props) {\n    \n    let pool = props.data;\n    console.log(\"pool=\", pool);\n    const {global_data,api} = useData();\n    const [labels, update_labels] = useState([]);\n    useEffect(()=> {\n        update_labels(props.data.label);\n    },[props.data]);\n\n    let onDown = (row)=> {\n        console.log(\"down==\", row);\n    };\n    let onRemove = async (row)=> {\n        let ret = await api.run_command(bcachefs.device.evacuate({\n            device: row.path,\n            mount_path: pool.mount_path,\n        }));\n        if(ret.ret == 0) {\n            let remove_ret = await api.run_command(bcachefs.device.remove({\n                device: row.path,\n                mount_path: pool.mount_path,\n            }));\n            if(remove_ret.ret == 0) {\n                let index = pool.label.findIndex(v=>v.path == row.path);\n                if(index>=0) {\n                    pool.label.splice(index, 1);\n                }\n                let pools = global_data.get('pools');\n                index = pools.findIndex(v=>v.name === pool.name);\n                if(index>=0) {\n                    pools.splice(index,1,pool);\n                }\n                let write_ret = await api.config_file({filename:'config/pools.config', 'op':\"put\", data: JSON.stringify(pools)});\n                if(write_ret.ret == 0) {\n                    update_labels(pool.label);\n                    global_data.set('pools', pools);\n                }\n            }\n        }\n    };\n\n\n\n    let Status = ()=> {\n        const [poolstatus, set_poolstatus] = useState({online:false,\n                                                       status_text: \"离线\"\n                                                      });\n        let mount_status = async ()=> {\n            let mount_path = pool.mount_path;\n            let ret = await api.run_command(bcachefs.fs.usage(mount_path));\n            if(ret.ret == 0) {\n                let stdout = ret.data.stdout.split(`\\n`);\n                set_poolstatus({online: true,\n                                status_text: \"在线\"\n                               });\n            } else {\n                set_poolstatus({online: false,\n                                status_text: \"离线\"\n                               });\n            }\n        };\n        let mount = async (e)=> {\n            e.preventDefault();\n            let ret = await api.run_command(bcachefs.mount(pool));\n            await mount_status();\n\n        };\n\n        let umount = async (e)=> {\n            e.preventDefault();\n            let ret = await api.run_command(bcachefs.umount(pool));\n            await mount_status();\n        };\n        useEffect(()=> {\n            //setParameters(pool.label);\n            let timer = setInterval(()=> {\n                mount_status();\n            }, 60*1000);\n            mount_status();\n            return ()=> {\n                //global_data.unwatch('sysstate', sysdata_update);\n                clearInterval(timer);\n            };\n        },[]);\n        return <div>名称:{pool.name} 挂载位置: {pool.mount_path} 状态:\n                 {poolstatus.online &&\n                  <Button onClick={umount}>卸载</Button>\n                 }\n                 {!poolstatus.online &&\n                  <Button onClick={mount}>挂载</Button>\n                 }</div>;\n    };\n\n    return <div>\n             <Status/>\n             <BlockDevice data={labels} onDown={onDown} onRemove={onRemove}/>;\n        </div>;\n};\n\nexport default Pool;\n","const bcachefs = {\n    command: \"bcachefs\",\n\n    fs: {\n        usage(path) {\n            let args = [];\n            args.push(\"fs\");\n            args.push(\"usage\");\n            args.push(path);\n            return {\n                command: \"bcachefs\",\n                args\n            };\n        }\n    },\n    device: {\n        remove(config) {\n            let args = [];\n            args.push('device');\n            args.push('remove');\n            args.push(config.device);\n            args.push(config.mount_path);\n            return {\n                command: \"bcachefs\",\n                args\n            };\n        },\n        add(config) {\n            let args = [];\n            args.push('device');\n            args.push('add');\n            config.label && config.label != '' && args.push(`--label=${config.label}`);\n            config.fs_size && config.fs_size != '' && args.push(`--fs_size=${config.fs_size}`);\n            config.discard && config.discard == true && args.push(`--discard`);\n            config.bucket && config.bucket != '' && args.push(`--bucket=${config.bucket}`);\n            args.push(config.mount_path);\n            args.push(config.device);\n            return {\n                command: \"bcachefs\",\n                args\n            };\n        },\n        online(config) {\n            let args = [];\n            args.push('device');\n            args.push('online');\n            args.push(config.device);\n            return {\n                command: \"bcachefs\",\n                args\n            };\n        },\n        offline(config) {\n            let args = [];\n            args.push('device');\n            args.push('offline');\n            args.push(config.device);\n            return {\n                command: \"bcachefs\",\n                args\n            };\n        },\n        evacuate(config) {\n            let args = [];\n            args.push('device');\n            args.push('evacuate');\n            args.push(config.device);\n            return {\n                command: \"bcachefs\",\n                args\n            };\n        }\n    },\n    format(config) {\n        let args = [];\n        args.push(\"format\");\n        args.push(`--compression=${config['compression']}`);\n        if(config[\"encrypted\"]) args.push(\"--encrypted\");\n        args.push(`--foreground_target=${config['foreground_target']}`);\n        args.push(`--promote_target=${config['promote_target']}`);\n        args.push(`--background_target=${config['background_target']}`);\n        args.push(`--replicas=${config['replicas']}`);\n        for(let disk of config['label']) {\n            args.push(`--label=${disk.name}`);\n            args.push(`${disk.path}`);\n        }\n        return {\n            command: this.command,\n            args\n        };\n    },\n    list(config) {\n        let args = [];\n        args.push(\"list\");\n        args.push(config['path']);\n        return {\n            command: this.command,\n            args\n        };\n    },\n    list_journal(config) {\n        let args = [];\n        args.push(\"list_journal\");\n        args.push(config['path']);\n        return {\n            command: this.command,\n            args\n        };\n    },\n    mount(config) {\n        let args = [];\n        args.push(\"-t\");\n        args.push(\"bcachefs\");\n        args.push(config['label'].map(v=>v.path).join(':'));\n        args.push(config.mount_path);\n        return {\n            command: \"mount\",\n            args\n        };\n    },\n    umount(config) {\n        let args = [];\n        args.push(config.mount_path);\n        return {\n            command: \"umount\",\n            args\n        };\n\n    }\n};\n\nexport default bcachefs;\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","disks","update_disks","_useState3","_useState4","data","update_data","_useState5","_useState6","_useState7","_useState8","page","setPage","_useState9","_useState10","rowsPerPage","setRowsPerPage","_useState11","online","status_text","_useState12","_useState13","_useState14","filter","filteredData","row","Object","values","some","value","toString","toLowerCase","includes","_useData","useData","global_data","api","useEffect","get","sysdata_update","v","blockdevices","old_data","status","forEach","one","d","path","concat","Device","block","index","findIndex","splice","_objectSpread","id","push","_toConsumableArray","watch","unwatch","console","log","_jsxs","_Fragment","children","_jsx","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","slice","map","onDown","Button","onClick","onAdd","check_add_status","onRemove","model","serial","size","TablePagination","count","length","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","style","marginTop","set_disks","pools","setPools","key","type","parent_id","useContext","DataContext","schema","setSchema","openAddDialog","setOpenAddDialog","my_set","_asyncToGenerator","_regeneratorRuntime","mark","_callee","read_ret","_pools","wrap","_context","prev","next","filename","sent","ret","JSON","parse","set","stop","my_set_pool","jsonEditorFormRef","useRef","handleCloseAddDialog","handleSaveAddDialog","_ref2","_callee2","config","pool_index","pool","format_ret","name","cur_pools","_index","write_config_ret","mount_ret","_context2","current","getValue","t0","op","bcachefs","mount_path","label","device","stringify","abrupt","split","auto_mount","t1","error","apply","arguments","CustomDialogContent","styled","DialogContent","width","RenderAddDialog","Dialog","open","onClose","fullWidth","maxWidth","DialogTitle","JsonEditorForm","ref","DialogActions","test","_ref3","_callee3","disk_config","d_w_ret","_context3","Rend_Pool","_step2","_iterator2","_createForOfIteratorHelper","s","n","done","Pool","err","e","f","preventDefault","properties","compression","required","BlockDevice","pool_names","_step","_iterator","JSONEditor","window","Disk_Select","_JSONEditor$AbstractE","_inherits","_super","_createSuper","_classCallCheck","_createClass","_this","self","this","title","header","theme","getFormInputLabel","getTitle","isRequired","container","appendChild","options","div","document","createElement","append","view_root","ReactDOM","rix_init_flag","onChange","setValue","used_disks","rix_make_watch_data","used","cur_path","parent","uniqueItems","cur_list","jsoneditor","list","set_model","pr","getEditor","v2","defaults","MyRender","setOptions","set_options","list_options","Autocomplete","freeSolo","getOptionLabel","option","disk","renderInput","params","TextField","render","init","fromTemplate","refreshValue","_this2","setTimeout","unmount","AbstractEditor","forwardRef","editorRef","callbacks","containerRef","editors","disk_select","resolvers","unshift","format","on","destroy","useImperativeHandle","labels","update_labels","_ref","run_command","config_file","_x","Status","poolstatus","set_poolstatus","mount_status","stdout","mount","_x2","umount","_ref4","_callee4","_context4","_x3","timer","setInterval","clearInterval","command","fs","usage","args","remove","add","fs_size","discard","bucket","offline","evacuate","list_journal","join"],"sourceRoot":""}