{"version":3,"file":"static/js/597.a7f0aabb.chunk.js","mappings":"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","sources":["utils/qemu.js"],"sourcesContent":["import { js2xml, xml2js } from 'xml-js';\nimport api from '../api';\n\nfunction long_cmd(command, callback = { stdout: null, stderr: null, onerr: null, onend:null }) {\n    let location = window.location;\n    let args = command;/*{\n        \"command\": \"/bin/bash\",\n        \"args\": [\"-c\", `cd ${config.dir} && docker compose up -d`]\n    };*/\n    let args_s = encodeURIComponent(JSON.stringify(args));\n    let socket = new WebSocket((location.protocol == \"http:\" ? \"ws://\" : \"wss://\") + location.host + \"/api/ws/shell?args=\" + args_s);\n    socket.onopen = () => {\n        socket.onclose = () => {\n            socket = null;\n            if(callback.onend) {\n                callback.onend();\n            }\n        };\n        socket.onmessage = (event) => {\n            console.log(event.data);\n            if (callback.stdout) {\n                callback.stdout(event.data);\n            }\n        };\n    };\n    socket.onerror = (err) => {\n        if (callback.onerr) {\n            callback.onerr(err);\n        }\n        socket = null;\n    };\n\n}\n\nconst qemu = {\n    command: \"qemu-system\",\n    arch: \"x86_64\",\n    async check_virt_manager() {\n        let p = {\n            command: \"./scripts/install_virt_manager.sh\",\n            args: [\"check\"]\n        };\n        return await api.run_command(p);\n    },\n    install_virt_manager(callback={stdout:null, stderr:null, onerr:null, onend:null}) {\n        long_cmd({\n            \"command\": \"./scripts/install_virt_manager.sh\",\n            args: [\"install_virt_manager\"],\n        }, callback);\n    },\n    run_virt_manager(callback = { stdout: null, stderr: null, onerr: null, onend: null }) {\n        long_cmd({\n            \"command\": \"./scripts/install_virt_manager.sh\",\n            args: [\"run_virt_manager\"],\n        }, callback);\n    },\n    async check_x11_bridge() {\n        let p = {\n            command: \"./scripts/install_x11_bridge.sh\",\n            args: [\"check\"]\n        };\n        return await api.run_command(p);\n    },\n    install_x11_bridge(callback = { stdout: null, stderr: null, onerr: null, onend: null }) {\n        long_cmd({\n            \"command\": \"./scripts/install_x11_bridge.sh\",\n            args: [\"install_x11_bridge\"],\n        }, callback);\n    },\n    run_x11_bridge(callback = { stdout: null, stderr: null, onerr: null, onend: null }) {\n        long_cmd({\n            \"command\": \"./scripts/install_x11_bridge.sh\",\n            args: [\"run_x11_bridge\"],\n        }, callback);\n    },\n    install(callback={stdout:null, stderr:null, onerr:null, onend:null}) {\n        long_cmd({\n            \"command\": \"./scripts/install_qemu.sh\",\n            args: [\"qemu\"],\n        }, callback);\n    },\n    template: {\n    },\n    parse_address(address) {\n        if(!address) return {};\n        let ret = {\n            \"address\": {\n                \"_attributes\": {\n                    \"type\": `${address.type}`,\n                    \"domain\": \"0x0000\",\n                    \"bus\": `${address.bus}`,\n                    \"port\": address?.port || undefined,\n                    \"function\": address?.['function'] || undefined,//`${address.function}`,\n                    \"multifunction\": address?.multifunction|| undefined\n                }\n            }\n        };\n        return ret;\n    },\n    parse_usb(v) {\n        let ret = {\n            \"controller\": {\n                \"_attributes\": {\n                    \"type\": \"usb\",\n                    \"index\": v?.index||\"0\",\n                    \"model\": `${v.model}`\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": v?.alias_name||`usb`\n                    }\n                },\n                ...this.parse_address(v.address)\n            }\n        };\n        if (v.master) {\n            ret[\"controller\"][\"master\"] = {\n                \"_attributes\": {\n                    \"startport\": `${v.master.startport}`\n                }\n            };\n        }\n        return ret;\n    },\n    parse_disk(v) {\n        let ret = {\n            \"disk\": {\n                \"_attributes\": {\n                    \"type\": \"file\",\n                    \"device\": \"disk\"\n                },\n                \"driver\": {\n                    \"_attributes\": {\n                        \"name\": \"qemu\",\n                        \"type\": `${v.type}`,\n                        \"cache\": \"writeback\"\n                    }\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"file\": `${v.filename}`,\n                        \"index\": `${v.boot_order}`\n                    }\n                },\n                \"backingStore\": {\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"dev\": \"hdc\",\n                        \"bus\": `${v.bus_options}`\n                    }\n                },\n                \"boot\": {\n                    \"_attributes\": {\n                        \"order\": `${v.boot_order}`\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": \"virtio_disk2\"\n                    }\n                },\n                ...this.parse_address(v?.address||{\n                    \"type\": \"pci\",\n                    \"bus\": \"0x03\",\n                    \"slot\": \"0x00\",\n                    \"function\": \"0x0\"\n                })\n            }\n        };\n        return ret;\n    },\n    parse_pci(v) {\n        let ret = {\n            \"controller\": {\n                \"_attributes\": {\n                    \"type\": `pci`,\n                    \"index\": `${v.index}`,\n                    \"model\": `${v.model}`\n                },\n                \"alias\": {\n                    \"_attributes\": `${v.alias_name}`,\n                },\n                ...this.parse_address(v?.address||{})\n                }\n        };\n        if(v.model_name) {\n            ret['controller'][\"model\"] = {\n                \"_attributes\": {\n                    \"name\": `${v.model_name}`\n                }\n            };\n        }\n        if(v.target) {\n            let target = v.target;\n            ret['controller'][\"target\"] = {\n                \"_attributes\": {\n                    \"classis\": `${target.classis}`,\n                    \"port\": `${target.port}`\n                }\n            };\n\n        }\n        return ret;\n    },\n    parse_network(v) {\n        let ret = {\n            \"interface\": {\n                \"_attributes\": {\n                    \"type\":v?.type||`bridge`\n                },\n                \"mac\": {\n                    \"_attributes\": {\n                        \"address\": `${v.mac}`\n                    }\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"bridge\": `${v.network}`\n                    }\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"dev\": `${v.target}`\n                    }\n                },\n                \"model\": {\n                    \"_attributes\": {\n                        \"type\": `${v.model}`\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": `${v.alias_name}`\n                    }\n                },\n                ...this.parse_address(v.address)\n            }\n        };\n        return ret;\n    },\n    parse_serial(v) {\n        let ret= {\n            \"serial\": {\n                \"_attributes\": {\n                    \"type\": `${v.type}`,\n                    \"tty\": v?.tty||undefined\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"path\": `${v.path}`\n                    }\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"type\": `${v.target_type}`,\n                        \"port\": `${v.port}`\n                    },\n                    \"model\": {\n                        \"_attributes\": {\n                            \"name\": `${v.target_type}`\n                        }\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": `${v.alias_name}`\n                    }\n                }\n            }\n        };\n        return ret;\n    },\n    parse_channel(v) {\n        let ret = {\n            'channel': {\n                \"_attributes\": {\n                    \"type\": \"unix\"\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"mode\": \"bind\",\n                        \"path\": `${v.path}`\n                    }\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"type\": \"virtio\",\n                        \"name\": \"org.qemu.guest_agent.0\",\n                        \"state\": \"disconnected\"\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": \"channel0\"\n                    }\n                },\n                ...this.parse_address(v.address)\n            }\n        };\n        return ret;\n    },\n    parse_input(v) {\n        let ret = {\n            'input': {\n                \"_attributes\": {\n                    \"type\": `${v.type}`,\n                    \"bus\": `${v.bus}`\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": `${v.alias_name}`\n                    }\n                },\n                ...this.parse_address(v.address)\n            }\n        };\n        return ret;\n    },\n    parse_console(_v) {\n        let ret = {\n            \"console\": {\n                \"_attributes\": {\n                    \"type\": \"pty\",\n                    \"tty\": \"/dev/pts/2\"\n                },\n                \"source\": {\n                    \"_attributes\": {\n                        \"path\": \"/dev/pts/2\"\n                    }\n                },\n                \"target\": {\n                    \"_attributes\": {\n                        \"type\": \"serial\",\n                        \"port\": 0\n                    }\n                },\n                \"alias\": {\n                    \"_attributes\": {\n                        \"name\": \"serial0\"\n                    }\n                }\n            }\n        };\n        return ret;\n    },\n    parse_config(config) {\n        console.log(\"config===\", config);\n        let usbs = [{\n            \"model\": \"ich9-ehci1\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x07\",\n                \"function\": \"0x0\",\n                \"multifunction\": \"on\"\n            }\n        },\n        {\n            \"model\": \"ich9-uhci1\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x07\",\n                \"function\": \"0x0\",\n            },\n            \"master\": {\n                \"startport\": 0\n            }\n        },\n        {\n            \"model\": \"ich9-uhci2\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x07\",\n                \"function\": \"0x1\",\n            },\n            \"master\": {\n                \"startport\": 2\n            }\n        },\n        {\n            \"model\": \"ich9-uhci3\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x07\",\n                \"function\": \"0x2\",\n            },\n            \"master\": {\n                \"startport\": 4\n            }\n        }\n        ].map(v => {\n            let ret = this.parse_usb(v);\n            return ret;\n        });\n        let disks = config.disks.map(v=> {\n            return this.parse_disk(v);\n        });\n        let cdrom = [{\n            bus:0,\n            target:0,\n            unit:0,\n            target_dev: \"hda\",\n            ...config.cdrom\n        }].map((v, index) => {\n            let ret = {\n                \"disk\": {\n                    \"_attributes\": {\n                        \"type\": \"file\",\n                        \"device\": \"cdrom\"\n                    },\n                    \"driver\": {\n                        \"_attributes\": {\n                            \"name\": \"qemu\",\n                            \"type\": \"raw\"\n                        }\n                    },\n                    \"source\": {\n                        \"_attributes\": {\n                            \"file\": `${v.filename}`,\n                            \"index\": `${index}`\n                        }\n                    },\n                    \"backingStore\": {\n                    },\n                    \"target\": {\n                        \"_attributes\": {\n                            \"dev\": `${v.target_dev}`,\n                            \"bus\": `${v.bus_options}`,\n                            \"tray\": \"open\"\n                        }\n                    },\n                    \"readonly\": {\n                    },\n                    \"boot\": {\n                        \"_attributes\": {\n                            \"order\": `${v.boot_order}`\n                        }\n                    },\n                    \"alias\": {\n                        \"_attributes\": {\n                            \"name\": `${v.bus_options}${v.bus}-${v.target}-${v.unit}`\n                        }\n                    }\n                }\n            };\n            return ret;\n        });\n        let sata=[{\n            \"type\": \"sata\",\n            \"alias_name\": \"ide\",\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slit\": \"0x1f\",\n                \"function\": \"0x2\"\n            }\n        }].map((v, index)=> {\n            let ret = {\n                \"controller\": {\n                    \"_attributes\": {\n                        \"type\": `${v.type}`,\n                        \"index\": `${index}`\n                    },\n                    \"alias\": {\n                        \"_attributes\": `${v.alias_name}`,\n                    },\n                    ...this.parse_address(v.address)\n                }\n            };\n            return ret;\n        });\n        let pcis = [{\n            \"model\": \"pcie-root\",\n            \"alias_name\": \"pcie.0\"\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.1\",\n            \"target\": {\n                \"chassis\": \"1\",\n                \"port\": \"0x10\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x0\",\n                \"multifunction\": \"on\"\n            }\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.2\",\n            \"target\": {\n                \"chassis\": \"2\",\n                \"port\": \"0x11\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x1\",\n            }\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.3\",\n            \"target\": {\n                \"chassis\": \"3\",\n                \"port\": \"0x12\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x2\",\n            }\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.4\",\n            \"target\": {\n                \"chassis\": \"4\",\n                \"port\": \"0x13\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x3\",\n            }\n        },\n        {\n            \"model\": \"pcie-root-port\",\n            \"model_name\": \"pcie-root-port\",\n            \"alias_name\": \"pci.5\",\n            \"target\": {\n                \"chassis\": \"5\",\n                \"port\": \"0x14\"\n            },\n            \"address\": {\n                \"type\": \"pci\",\n                \"bus\": \"0x00\",\n                \"slot\": \"0x02\",\n                \"function\": \"0x4\",\n            }\n        }\n        ].map((v, index) => {\n            return this.parse_pci({ ...v, index });\n        });\n        let nics = [...config.nic].map((v, _index)=>{\n            return this.parse_network(v);\n        });\n        let serials = [{\n            \"type\": \"pty\",\n            \"path\": \"/dev/pts/2\",\n            \"alias_name\": \"serial0\",\n            \"port\": \"0\",\n            \"target_type\": \"isa-serial\"\n        },\n            {\n                \"type\": \"pty\",\n                \"path\": \"/dev/pts/2\",\n                \"tty\": \"/dev/pts/2\",\n                \"alias_name\": \"serial0\",\n                \"port\": \"0\",\n                \"target_type\": \"serial\"\n        }\n                      ].map(v=> {\n            return this.parse_serial(v);\n        });\n        let channels = [{\n            \"path\": \"org.qemu.guest_agent.0\"\n        }].map(v=> {\n            return this.parse_channel(v);\n        });\n        let consoles = [{\n        }].map(v=> {\n            return this.parse_console(v);\n        });\n        let inputs = [{\n            \"type\": \"tablet\",\n            \"bus\": \"usb\",\n            \"alias_name\": \"input0\",\n            \"address\": {\n                \"type\": \"usb\",\n                \"bus\": \"0\",\n                \"port\": \"1\"\n            }\n        },\n        {\n            \"type\": \"mouse\",\n            \"bus\": \"ps2\",\n            \"alias_name\": \"input1\"\n        },\n        {\n            \"type\": \"keyboard\",\n            \"bus\": \"ps2\",\n            \"alias_name\": \"input2\"\n        }\n        ].map(v => {\n            return this.parse_input(v);\n        });\n        let common = {\n            ...this.template,\n            \"name\": {\n                \"_text\": `${config.name}`\n            },\n            \"metadata\": {\n            },\n            \"memory\": {\n                \"_attributes\": {\n                    \"unit\": \"KiB\"\n                },\n                \"_text\": `${config.memory*1024}`\n            },\n            \"currentMemory\": {\n                \"_attributes\": {\n                    \"unit\": \"KiB\"\n                },\n                \"_text\": `${config.memory*1024}`\n            },\n            \"vcpu\": {\n                \"_attributes\": {\n                    \"placement\": \"static\"\n                },\n                \"_text\": `${config.smp}`\n            },\n            \"cputune\": {\n                \"vcpuin\": [{\n                    \"_attributes\": {\n                        \"vcpu\": `${0}`,\n                        \"cpuset\": `${0}`\n                    }\n                }]\n            },\n            \"os\": {\n                \"type\": {\n                    \"_attributes\": {\n                        \"arch\": \"x86_64\",\n                        \"machine\": `${config.machine}`\n                    },\n                    \"_text\": \"hvm\"\n                },\n                \"loader\": {\n                    \"_attributes\": {\n                        \"readonly\": \"yes\",\n                        \"type\": \"pflash\"\n                    },\n                    \"_text\": \"/usr/share/qemu/ovmf-x64/OVMF_CODE-pure-efi.fd\"\n                },\n                \"nvram\": {\n                    \"_text\": \"/etc/libvirt/qemu/nvram/99c36dce-e5af-5de4-b61f-17ea21137658_VARS-pure-efi.fd\"\n                }\n            },\n            \"features\": {\n                \"acpi\":{},\n                \"apic\":{},\n            },\n            \"cpu\": {\n                \"_attributes\": {\n                    \"mode\": 'host-passthrough',\n                    \"check\": 'none',\n                    migratable: 'on'\n                },\n                \"topology\": {\n                    \"_attributes\": {\n                        \"sockets\": \"1\",\n                        \"dies\": \"1\",\n                        \"cores\": \"1\",\n                        \"threads\": \"1\"\n                    }\n                },\n                \"cache\": {\n                    \"_attributes\": {\n                        \"mode\": \"passthrough\"\n                    }\n                }\n            },\n            \"clock\": {\n                \"_attributes\": {\n                    \"offset\": \"utc\"\n                },\n                \"timer\":[\n                    {\n                        \"_attributes\": {\n                            \"name\": \"rtc\",\n                            \"tickpolicy\":'catchup'\n                        }\n                    },\n                    {\n                        \"_attributes\": {\n                            \"name\": \"pit\",\n                            \"tickpolicy\": \"delay\"\n                        }\n                    },\n                    {\n                        \"_attributes\": {\n                            \"name\": \"hpet\",\n                            \"tickpolicy\": \"no\"\n                        }\n                    }\n                ]\n            },\n            \"on_poweroff\": {\n                \"_text\": \"destroy\"\n            },\n            \"on_reboot\": {\n                \"_text\": \"restart\"\n            },\n            \"on_crash\": {\n                \"_text\": \"restart\"\n            },\n            \"devices\": {\n                \"emulator\": {\n                    \"_text\": \"/usr/local/sbin/qemu\"\n                },\n                \"disk\": [\n                    ...disks,\n                ],\n                \"cdrom\": [\n                    ...cdrom\n                ],\n                ...usbs,\n                ...sata,\n                ...pcis,\n                ...nics,\n                ...serials,\n                ...channels,\n                ...consoles,\n                ...inputs\n            }\n        };\n        let ret = js2xml(common, { compact: true, ignoreComment: true, spaces: 4 });\n        console.log(\"ret==\", ret);\n    }\n\n};\n\nexport default qemu;\n"],"names":["long_cmd","command","callback","arguments","length","undefined","stdout","stderr","onerr","onend","location","window","args","args_s","encodeURIComponent","JSON","stringify","socket","WebSocket","protocol","host","onopen","onclose","onmessage","event","console","log","data","onerror","err","qemu","arch","check_virt_manager","_asyncToGenerator","_regeneratorRuntime","mark","_callee","p","wrap","_context","prev","next","api","abrupt","sent","stop","install_virt_manager","run_virt_manager","check_x11_bridge","_callee2","_context2","install_x11_bridge","run_x11_bridge","install","template","parse_address","address","concat","type","bus","port","multifunction","parse_usb","v","ret","_objectSpread","index","model","alias_name","this","master","startport","parse_disk","filename","boot_order","bus_options","parse_pci","model_name","target","classis","parse_network","mac","network","parse_serial","tty","path","target_type","parse_channel","parse_input","parse_console","_v","parse_config","config","_this","usbs","map","disks","cdrom","unit","target_dev","sata","pcis","nics","_toConsumableArray","nic","_index","serials","channels","consoles","inputs","common","name","memory","smp","machine","migratable","js2xml","compact","ignoreComment","spaces"],"sourceRoot":""}