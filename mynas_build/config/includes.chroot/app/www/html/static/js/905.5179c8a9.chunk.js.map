{"version":3,"file":"static/js/905.5179c8a9.chunk.js","mappings":"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","sources":["components/BlockDevice.js"],"sourcesContent":["import React, { useState, useEffect, useRef,useContext } from 'react';\n//import api from '../api';\nimport { styled } from '@mui/system';\nimport { Table, Pagination, Button, Dialog, DialogTitle, DialogContent, DialogActions, TextField, TableContainer,\n         TableHead,\n         TableRow,\n         TableCell,\n         TableBody,\n         Paper,\n         TablePagination,\n       } from '@mui/material';\n\nimport {useData} from \"../store/global_data.js\";\n\n\nfunction BlockDevice(props){\n    const [disks, update_disks] = useState([]);\n    const [data, update_data] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n    const [poolstatus, set_poolstatus] = useState({online:false,\n                                                   status_text: \"离线\"\n                                                  });\n    const [filter, setFilter] = useState('');\n    const filteredData = disks.filter((row) => {\n        return Object.values(row).some((value) => {\n            return value.toString().toLowerCase().includes(filter.toLowerCase());\n        });\n    });\n    const {global_data, api} = useData();\n    //disks = data;\n    //merger_data(global_data.get('sysstat', []));\n    useEffect(()=> {\n        let blockdevices = global_data.get('blockdevices');\n        let sysdata_update = (v)=> {\n            let blockdevices = global_data.get('blockdevices');\n            //let v = global_data.get('sysstat', []);\n            //Device             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd\n            let label = data;\n            let old_data = disks;\n            let status = v;//v.hosts[0].statistics[0].disk;\n            label.forEach(one=>{\n                let d = status.filter(v=>{\n                    if(one.path == `/dev/${v.Device}`) return true;\n                    return false;\n                })[0];\n                if(!blockdevices) return;\n                let block = blockdevices.filter(v=>v.path === one.path)[0];\n                if(d&&block) {\n                    let index = old_data.findIndex(v=>v.path == one.path);\n                    if(index >= 0) {\n                        old_data.splice(index, 1, {\n                            ...block,\n                            id: one.path,\n                            ...d\n                        });\n                    } else {\n                        old_data.push({\n                            ...block,\n                            id: one.path,\n                            ...d\n                        });\n                    }\n                }\n            });\n            update_disks([...old_data]);\n        };\n        //sysdata_update([]);\n        global_data.watch('sysstat', sysdata_update);\n        update_disks(data);\n        return ()=> {\n            global_data.unwatch('sysstat', sysdata_update);\n        };\n    },[data]);\n    useEffect(()=> {\n        console.log(\"props===\", props);\n        if(props.data)\n        update_data(props.data);\n    },[props.data]);\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleFilterChange = (event) => {\n        setFilter(event.target.value);\n    };\n    const handleEditClick = (parameter) => {\n    };\n    return <>\n         <TableContainer component={Paper}>\n           <Table>\n             <TableHead>\n               <TableRow>\n                 <TableCell>设备</TableCell>\n                 <TableCell>PATH</TableCell>\n                 <TableCell>标识</TableCell>\n                 <TableCell>容量</TableCell>\n                 <TableCell>读取</TableCell>\n                 <TableCell>写入</TableCell>\n               </TableRow>\n             </TableHead>\n             <TableBody>\n               {filteredData\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row) => (\n                    <TableRow key={row.path}>\n                      <TableCell>\n                        { props.onDown &&\n                        <Button onClick={() => props.onDown(row)}>下线</Button>\n                        }\n                        { props.onAdd&&props.check_add_status&&props.check_add_status(row) &&\n                          <Button onClick={() => props.onAdd(row)}>添加到池</Button>\n                        }\n                        { props.onRemove &&\n                        <Button onClick={() => props.onRemove(row)}>移除</Button>\n                        }\n                      </TableCell>\n                      <TableCell>{row.path}</TableCell>\n                      <TableCell>{row.model} {row.serial} {row.size}</TableCell>\n                      <TableCell>{row.size}</TableCell>\n                      <TableCell>{row[\"kB_read/s\"]}</TableCell>\n                      <TableCell>{row[\"kB_wrtn/s\"]}</TableCell>\n                    </TableRow>\n                ))}\n             </TableBody>\n           </Table>\n         </TableContainer>\n         <TablePagination\n           component=\"div\"\n           count={filteredData.length}\n           page={page}\n           onPageChange={handleChangePage}\n           rowsPerPage={rowsPerPage}\n           onRowsPerPageChange={handleChangeRowsPerPage}\n           style={{ marginTop: '1rem' }}\n         />\n       </>;\n};\n\nexport default BlockDevice;\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","disks","update_disks","_useState3","_useState4","data","update_data","_useState5","_useState6","_useState7","_useState8","page","setPage","_useState9","_useState10","rowsPerPage","setRowsPerPage","_useState11","online","status_text","_useState12","_useState13","_useState14","filter","filteredData","row","Object","values","some","value","toString","toLowerCase","includes","_useData","useData","global_data","api","useEffect","get","sysdata_update","v","blockdevices","old_data","status","forEach","one","d","path","concat","Device","block","index","findIndex","splice","_objectSpread","id","push","_toConsumableArray","watch","unwatch","console","log","_jsxs","_Fragment","children","_jsx","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","slice","map","onDown","Button","onClick","onAdd","check_add_status","onRemove","model","serial","size","TablePagination","count","length","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","style","marginTop"],"sourceRoot":""}